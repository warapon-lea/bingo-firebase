// ================================================
// Firebase Configuration  
// ================================================
const firebaseConfig = {
  apiKey: "AIzaSyB4wsKzG-aH2HmvwLvl6aBx0xBDv7Bbc74",
  authDomain: "road-trip-game-367c4.firebaseapp.com",
  databaseURL: "https://road-trip-game-367c4-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "road-trip-game-367c4",
  storageBucket: "road-trip-game-367c4.firebasestorage.app",
  messagingSenderId: "902568353621",
  appId: "1:902568353621:web:db7fff225cd7b3dacf19dc",
  measurementId: "G-RW8WMCFS1W"
};

// ================================================
// ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// ================================================
const missions = [
    { id: 1, title: "üêï ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤", description: "‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏´‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢", points: 10 },
    { id: 2, title: "üê± ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß", description: "‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡πÅ‡∏°‡∏ß‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢", points: 15 },
    { id: 3, title: "üí∞ ‡∏´‡∏≤‡∏õ‡πâ‡∏≤‡∏¢ TrueMoney", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢ TrueMoney Wallet", points: 20 },
    { id: 4, title: "üè™ ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô 7-Eleven", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô 7-Eleven", points: 10 },
    { id: 5, title: "‚õΩ ‡∏´‡∏≤‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô PTT", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏õ‡∏±‡πä‡∏° PTT", points: 15 },
    { id: 6, title: "üå≥ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà", description: "‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢", points: 10 },
    { id: 7, title: "üöó ‡∏£‡∏ñ‡∏™‡∏µ‡πÅ‡∏î‡∏á", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡∏™‡∏µ‡πÅ‡∏î‡∏á", points: 10 },
    { id: 8, title: "üçú ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏¥‡∏°‡∏ó‡∏≤‡∏á", description: "‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 15 },
    { id: 9, title: "üèõÔ∏è ‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏®‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏®‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤", points: 25 },
    { id: 10, title: "üåÖ ‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏™‡∏ß‡∏¢‡πÜ", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°", points: 20 },
    { id: 11, title: "üöú ‡∏£‡∏ñ‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå", description: "‡∏´‡∏≤‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 30 },
    { id: 12, title: "üêÆ ‡∏ß‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡∏∞", description: "‡∏û‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 25 },
    { id: 13, title: "üåæ ‡∏ó‡∏∏‡πà‡∏á‡∏ô‡∏≤", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡πà‡∏á‡∏ô‡∏≤", points: 15 },
    { id: 14, title: "üèîÔ∏è ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏†‡∏π‡πÄ‡∏Ç‡∏≤", points: 20 },
    { id: 15, title: "üì∏ ‡∏£‡∏π‡∏õ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡∏°", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏°‡∏π‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ó‡∏µ‡∏°", points: 50 }
];

// ================================================
// Global Variables
// ================================================
let db;
let currentTeamId = null;
let currentUserName = null;
let currentMissionId = null;
let currentGame = null; // 'snapventure' or 'wordguessing'
let currentAdminGame = 'snapventure'; // default admin game

// ================================================
// LocalStorage Keys
// ================================================
const STORAGE_TEAM_ID = 'roadtrip_team_id';
const STORAGE_USER_NAME = 'roadtrip_user_name';
const STORAGE_CURRENT_GAME = 'roadtrip_current_game';

// ================================================
// Game Configuration
// ================================================
const GAME_CONFIG = {
    snapventure: {
        name: 'Snap Venture',
        icon: 'üì∏',
        description: '‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à',
        missionType: 'photo' // only photo missions
    },
    wordguessing: {
        name: 'Word Guessing',
        icon: 'üí≠',
        description: '‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏≥',
        missionType: 'quiz' // only quiz missions
    }
};

// ================================================
// Initialize Default Missions and Settings
// ================================================
function initializeDefaultMissions() {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    firebase.database().ref('missions').once('value', (snapshot) => {
        if (!snapshot.exists()) {
            console.log('üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...');
            const defaultMissions = [
                { id: 1, title: "üêï ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏≤", description: "‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡∏´‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢", points: 10 },
                { id: 2, title: "üê± ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß", description: "‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡πÅ‡∏°‡∏ß‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢", points: 15 },
                { id: 3, title: "üí∞ ‡∏´‡∏≤‡∏õ‡πâ‡∏≤‡∏¢ TrueMoney", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢ TrueMoney Wallet", points: 20 },
                { id: 4, title: "üè™ ‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô 7-Eleven", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô 7-Eleven", points: 10 },
                { id: 5, title: "‚õΩ ‡∏´‡∏≤‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô PTT", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏õ‡∏±‡πä‡∏° PTT", points: 15 },
                { id: 6, title: "üå≥ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà", description: "‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏î‡πâ‡∏ß‡∏¢", points: 10 },
                { id: 7, title: "üöó ‡∏£‡∏ñ‡∏™‡∏µ‡πÅ‡∏î‡∏á", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡∏™‡∏µ‡πÅ‡∏î‡∏á", points: 10 },
                { id: 8, title: "üçú ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏¥‡∏°‡∏ó‡∏≤‡∏á", description: "‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 15 },
                { id: 9, title: "üèõÔ∏è ‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏®‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏®‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤", points: 25 },
                { id: 10, title: "üåÖ ‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏™‡∏ß‡∏¢‡πÜ", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°", points: 20 },
                { id: 11, title: "üöú ‡∏£‡∏ñ‡πÅ‡∏ó‡∏£‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå", description: "‡∏´‡∏≤‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 30 },
                { id: 12, title: "üêÆ ‡∏ß‡∏±‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏û‡∏∞", description: "‡∏û‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏ô‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 25 },
                { id: 13, title: "üåæ ‡∏ó‡∏∏‡πà‡∏á‡∏ô‡∏≤", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡πà‡∏á‡∏ô‡∏≤", points: 15 },
                { id: 14, title: "üèîÔ∏è ‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", description: "‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏Å‡∏±‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î", points: 30 },
                { id: 15, title: "ü¶Ü ‡πÄ‡∏õ‡πá‡∏î ‡∏´‡πà‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏Å‡πà", description: "‡∏û‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡∏µ‡∏Å‡πÅ‡∏•‡∏∞‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ", points: 20 }
            ];
            
            defaultMissions.forEach(mission => {
                firebase.database().ref('missions').push(mission);
            });
            console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        }
    });
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    firebase.database().ref('settings/maxMembers').once('value', (snapshot) => {
        if (!snapshot.exists()) {
            firebase.database().ref('settings/maxMembers').set(5);
            console.log('‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: 5 ‡∏Ñ‡∏ô');
        }
    });
}

// ================================================
// Initialize Firebase
// ================================================
function initFirebase() {
    try {
        if (typeof firebase === 'undefined') {
            console.error('‚ùå Firebase SDK ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î');
            return;
        }

        firebase.initializeApp(firebaseConfig);
        db = firebase.database();
        console.log('‚úÖ Firebase initialized successfully');
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        initializeDefaultMissions();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        checkExistingSession();
        
        // üéØ Check for auto-join parameters after Firebase is ready
        checkAutoJoinParams();
        
    } catch (error) {
        console.error('‚ùå Error initializing Firebase:', error);
    }
}

// ================================================
// Check Auto-Join Parameters
// ================================================
async function checkAutoJoinParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const autoCode = urlParams.get('code');
    const autoTeam = urlParams.get('team');
    const autoName = urlParams.get('name');
    
    console.log('üéÆ URL Params:', { autoCode, autoTeam, autoName });
    
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á code ‡πÅ‡∏•‡∏∞ name ‚Üí Auto-join ‡πÄ‡∏•‡∏¢!
    if (autoCode && autoName) {
        console.log('üöÄ Auto-joining with:', { code: autoCode, name: autoName });
        
        try {
            // 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏° Word Guessing ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            currentGame = 'wordguessing';
            localStorage.setItem(STORAGE_CURRENT_GAME, 'wordguessing');
            console.log('‚úÖ Selected game: Word Guessing');
            
            // 2. ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ welcome
            const welcomeEl = document.getElementById('welcome');
            if (welcomeEl) {
                welcomeEl.style.display = 'none';
            }
            
            // 3. ‡πÅ‡∏™‡∏î‡∏á loading message
            document.body.insertAdjacentHTML('beforeend', `
                <div id="autoJoinLoading" style="
                    position: fixed;
                    inset: 0;
                    background: rgba(0,0,0,0.9);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 99999;
                    flex-direction: column;
                    gap: 20px;
                ">
                    <div style="font-size: 48px;">üéÆ</div>
                    <div style="color: white; font-size: 24px; font-weight: bold;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°...</div>
                    <div style="color: #4ECDC4; font-size: 16px;">‡∏£‡∏´‡∏±‡∏™: ${autoCode.toUpperCase()}</div>
                    <div style="color: #4ECDC4; font-size: 16px;">‡∏ä‡∏∑‡πà‡∏≠: ${autoName}</div>
                    <div class="loading" style="margin-top: 20px;"></div>
                </div>
            `);
            
            // 4. Auto-join ‡∏ó‡∏µ‡∏°
            const teamCodeUpper = autoCode.trim().toUpperCase();
            const memberName = autoName.trim();
            const memberKey = sanitizeFirebaseKey(memberName); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            
            // ‡∏•‡∏≠‡∏á join ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
            const roomRef = db.ref(`games/wordguessing/rooms/${teamCodeUpper}`);
            const roomSnapshot = await roomRef.once('value');
            
            if (roomSnapshot.exists()) {
                // ‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                const roomData = roomSnapshot.val();
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (roomData.members && roomData.members[memberKey]) {
                    alert('‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á!\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô');
                    document.getElementById('autoJoinLoading').remove();
                    location.reload();
                    return;
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                const maxMembers = roomData.maxMembers || 5;
                const currentMemberCount = roomData.members ? Object.keys(roomData.members).length : 0;
                
                if (currentMemberCount >= maxMembers) {
                    alert(`‚ùå ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!\n‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö ${maxMembers} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
                    document.getElementById('autoJoinLoading').remove();
                    location.reload();
                    return;
                }
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ memberKey ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö name ‡∏à‡∏£‡∏¥‡∏á)
                await roomRef.child(`members/${memberKey}`).set({
                    name: memberName, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    role: 'member',
                    joinedAt: Date.now()
                });
                
                currentTeamId = teamCodeUpper;
                currentUserName = memberName;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á team entry
                const teamData = {
                    name: roomData.name,
                    teamCode: teamCodeUpper,
                    game: 'wordguessing',
                    score: 0,
                    createdAt: roomData.createdAt || Date.now(),
                    isRoom: true,
                    members: {},
                    missions: {}
                };
                
                const teamRef = db.ref(`games/wordguessing/teams/${teamCodeUpper}`);
                const teamSnapshot = await teamRef.once('value');
                if (!teamSnapshot.exists()) {
                    await teamRef.set(teamData);
                }
                
                await teamRef.child(`members/${memberKey}`).set({
                    name: memberName, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    role: 'member',
                    joinedAt: Date.now()
                });
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
                saveSession(teamCodeUpper, memberName);
                
                // ‡∏•‡∏ö loading
                document.getElementById('autoJoinLoading').remove();
                
                // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°
                document.getElementById('gameBoard').style.display = 'block';
                loadGameBoard();
                
                console.log('‚úÖ Auto-join successful!');
                
            } else {
                // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
                let teamRef = db.ref(`games/wordguessing/teams/${teamCodeUpper}`);
                let snapshot = await teamRef.once('value');
                
                if (!snapshot.exists()) {
                    alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
                    document.getElementById('autoJoinLoading').remove();
                    location.reload();
                    return;
                }
                
                const teamData = snapshot.val();
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (teamData.members && teamData.members[memberKey]) {
                    alert('‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ó‡∏µ‡∏°!\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô');
                    document.getElementById('autoJoinLoading').remove();
                    location.reload();
                    return;
                }
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡∏° (‡πÉ‡∏ä‡πâ memberKey ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö name ‡∏à‡∏£‡∏¥‡∏á)
                await teamRef.child(`members/${memberKey}`).set({
                    name: memberName, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    role: 'member',
                    joinedAt: Date.now()
                });
                
                currentTeamId = teamCodeUpper;
                currentUserName = memberName;
                
                saveSession(teamCodeUpper, memberName);
                
                document.getElementById('autoJoinLoading').remove();
                document.getElementById('gameBoard').style.display = 'block';
                loadGameBoard();
                
                console.log('‚úÖ Auto-join successful!');
            }
            
        } catch (error) {
            console.error('‚ùå Auto-join error:', error);
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            if (document.getElementById('autoJoinLoading')) {
                document.getElementById('autoJoinLoading').remove();
            }
            location.reload();
        }
    } else if (autoCode) {
        // ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà code ‡πÑ‡∏°‡πà‡∏°‡∏µ name ‚Üí ‡πÅ‡∏™‡∏î‡∏á form ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠
        setTimeout(() => {
            const teamCodeInput = 
                document.getElementById('teamCodeInput') ||
                document.getElementById('teamCode') ||
                document.querySelector('input[name="teamCode"]') ||
                document.querySelector('input[placeholder*="‡∏£‡∏´‡∏±‡∏™"]') ||
                document.querySelector('input[placeholder*="code"]') ||
                document.querySelector('input[placeholder*="Code"]');
            
            if (teamCodeInput) {
                teamCodeInput.value = autoCode.toUpperCase();
                teamCodeInput.style.background = '#d4edda';
                teamCodeInput.style.borderColor = '#28a745';
                
                const nameInput = 
                    document.getElementById('memberNameInput') ||
                    document.getElementById('playerName') ||
                    document.getElementById('name') ||
                    document.querySelector('input[placeholder*="‡∏ä‡∏∑‡πà‡∏≠"]') ||
                    document.querySelector('input[placeholder*="name"]');
                
                if (nameInput) {
                    nameInput.focus();
                }
            }
        }, 1000);
    }
}

// ================================================
// Check Existing Session
// ================================================
async function checkExistingSession() {
    const savedTeamId = localStorage.getItem(STORAGE_TEAM_ID);
    const savedUserName = localStorage.getItem(STORAGE_USER_NAME);
    const savedGame = localStorage.getItem(STORAGE_CURRENT_GAME);
    
    if (savedTeamId && savedUserName && savedGame) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        try {
            const teamRef = db.ref(`games/${savedGame}/teams/${savedTeamId}`);
            const snapshot = await teamRef.once('value');
            
            if (snapshot.exists()) {
                currentTeamId = savedTeamId;
                currentUserName = savedUserName;
                currentGame = savedGame;
                
                // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                document.getElementById('welcome').style.display = 'none';
                document.getElementById('gameBoard').style.display = 'block';
                loadGameBoard();
                
                const gameName = GAME_CONFIG[savedGame].name;
                console.log(`‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡∏° ${gameName}:`, savedTeamId, '‡∏ä‡∏∑‡πà‡∏≠:', savedUserName);
            } else {
                // ‡∏ó‡∏µ‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                clearSession();
            }
        } catch (error) {
            console.error('Error checking session:', error);
            clearSession();
        }
    }
}

// ================================================
// Save Session
// ================================================
function saveSession(teamId, userName) {
    localStorage.setItem(STORAGE_TEAM_ID, teamId);
    localStorage.setItem(STORAGE_USER_NAME, userName);
    localStorage.setItem(STORAGE_CURRENT_GAME, currentGame);
}

// ================================================
// Clear Session
// ================================================
function clearSession() {
    localStorage.removeItem(STORAGE_TEAM_ID);
    localStorage.removeItem(STORAGE_USER_NAME);
    localStorage.removeItem(STORAGE_CURRENT_GAME);
    currentTeamId = null;
    currentUserName = null;
    currentGame = null;
}

// ================================================
// Generate Team Code
// ================================================
function generateTeamCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 6; i++) {
        code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
}

// ================================================
// Sanitize Name for Firebase Key
// ================================================
function sanitizeFirebaseKey(name) {
    // Firebase ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï: . # $ [ ] /
    // ‡πÅ‡∏õ‡∏•‡∏á . ‡πÄ‡∏õ‡πá‡∏ô _ ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏≠‡∏≠‡∏Å
    return name
        .replace(/\./g, '_')  // ‡πÅ‡∏õ‡∏•‡∏á . ‡πÄ‡∏õ‡πá‡∏ô _
        .replace(/[#$\[\]\/]/g, '')  // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
        .trim();
}

// ================================================
// Navigation Functions
// ================================================
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Snapventure (Solo Play)
function showCreateSoloRoom() {
    if (!currentGame) {
        alert(t('selectGameFirst'));
        return;
    }
    document.getElementById('gameMenu').style.display = 'none';
    document.getElementById('createTeam').style.display = 'block';
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    const header = document.querySelector('#createTeam .header h2');
    if (header) {
        header.innerHTML = `<span data-i18n="startPlaying">üéÆ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô</span>`;
    }
    
    // ‡∏ã‡πà‡∏≠‡∏ô input ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏° ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const teamNameGroup = document.querySelector('#createTeam .form-group:first-child');
    const playerNameLabel = document.querySelector('#createTeam .form-group:nth-child(2) label');
    
    if (teamNameGroup) {
        teamNameGroup.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
    }
    
    if (playerNameLabel) {
        playerNameLabel.innerHTML = `<span data-i18n="yourName">‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</span>`;
    }
    
    const submitBtn = document.querySelector('#createTeam .submit-btn');
    if (submitBtn) {
        submitBtn.innerHTML = `<span data-i18n="startButton">‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô</span>`;
    }
    
    updatePageLanguage();
}

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Word Guessing (Team Play)
function showCreateTeam() {
    if (!currentGame) {
        alert(t('selectGameFirst'));
        return;
    }
    document.getElementById('gameMenu').style.display = 'none';
    document.getElementById('createTeam').style.display = 'block';
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï UI ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏°
    const header = document.querySelector('#createTeam .header h2');
    if (header) {
        header.innerHTML = `<span data-i18n="createNewTeam">üéÆ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°</span>`;
    }
    
    const teamNameGroup = document.querySelector('#createTeam .form-group:first-child');
    const playerNameLabel = document.querySelector('#createTeam .form-group:nth-child(2) label');
    
    if (teamNameGroup) {
        teamNameGroup.style.display = 'block'; // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
    }
    
    if (playerNameLabel) {
        playerNameLabel.innerHTML = `<span data-i18n="leaderName">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡∏° (‡∏Ñ‡∏∏‡∏ì)</span>`;
    }
    
    const submitBtn = document.querySelector('#createTeam .submit-btn');
    if (submitBtn) {
        submitBtn.innerHTML = `<span data-i18n="createButton">‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏°</span>`;
    }
    
    updatePageLanguage();
}

function showJoinTeam() {
    if (!currentGame) {
        alert(t('selectGameFirst'));
        return;
    }
    document.getElementById('gameMenu').style.display = 'none';
    document.getElementById('joinTeam').style.display = 'block';
    updatePageLanguage();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Word Guessing - ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Join ‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π)
function showJoinTeamPage() {
    if (!currentGame) {
        alert(t('selectGameFirst'));
        return;
    }
    document.getElementById('joinTeam').style.display = 'block';
    updatePageLanguage();
}

function showPublicScoreboard() {
    document.getElementById('welcome').style.display = 'none';
    document.getElementById('publicScoreboard').style.display = 'block';
    loadPublicScoreboard();
}

async function showAdmin() {
    const password = prompt('üîê ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™ Admin:');
    if (!password) return;
    
    // Hash the password using SHA-256
    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(password));
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    
    // Check against Firebase (stored hash) - ‡πÉ‡∏ä‡πâ Firebase ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    const adminRef = firebase.database().ref('admin/passwordHash');
    const snapshot = await adminRef.once('value');
    
    if (snapshot.exists() && snapshot.val() === hashHex) {
        document.getElementById('welcome').style.display = 'none';
        document.getElementById('adminPanel').style.display = 'block';
        currentAdminGame = 'snapventure'; // default
        loadAdminScoreboard();
        loadMissionsAdmin();
        loadScheduleSettings();
    } else {
        alert('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î! ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    }
}

function selectAdminGame(gameType) {
    currentAdminGame = gameType;
    
    // Update active button
    document.querySelectorAll('.game-selector-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.closest('.game-selector-btn').classList.add('active');
    
    // Reload current tab data
    const activeTab = document.querySelector('.tab-btn.active');
    if (activeTab) {
        const tabName = activeTab.textContent.includes('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô') ? 'scoreboard' :
                       activeTab.textContent.includes('‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à') ? 'missions' : 'schedule';
        showAdminTab(tabName);
    }
}

function confirmLeaveTeam() {
    if (confirm('‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n(‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏ß‡πâ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà)')) {
        backToWelcome();
    }
}

function confirmLeaveRoom() {
    const gameName = GAME_CONFIG[currentGame]?.name || '‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ';
    if (confirm(`üö™ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á ${gameName} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‚úì ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏ß‡πâ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà\n‚úì ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ`)) {
        leaveRoom();
    }
}

function leaveRoom() {
    // Clear session ‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    clearSession();
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    document.getElementById('gameBoard').style.display = 'none';
    document.getElementById('welcome').style.display = 'block';
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    alert(t('leftRoomSuccess'));
}

// ================================================
// Game Rules Functions
// ================================================
function showGameRules(gameType) {
    const rulesContent = document.getElementById('rulesContent');
    
    if (gameType === 'snapventure') {
        rulesContent.innerHTML = `
            <div style="background: linear-gradient(135deg, #667EEA 0%, #764BA2 100%); padding: 25px; border-radius: 20px; margin-bottom: 25px; text-align: center; box-shadow: 0 8px 24px rgba(102, 126, 234, 0.25);">
                <h3 style="color: white; margin: 0; font-size: 1.5rem; font-weight: 700;">üéØ ${t('snapVentureTitle')}</h3>
            </div>
            
            <div style="background: white; padding: 24px; border-radius: 16px; margin-bottom: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); position: relative; overflow: hidden;">
                <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 4px; background: linear-gradient(180deg, #667EEA 0%, #764BA2 100%);"></div>
                <div style="display: flex; align-items: start; gap: 12px;">
                    <div style="background: linear-gradient(135deg, #667EEA 0%, #764BA2 100%); width: 40px; height: 40px; border-radius: 12px; display: flex; align-items: center; justify-content: center; flex-shrink: 0; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);">
                        <span style="font-size: 1.3rem;">1Ô∏è‚É£</span>
                    </div>
                    <div style="flex: 1;">
                        <h4 style="color: #667EEA; margin: 0 0 10px 0; font-size: 1.15rem; font-weight: 700;">
                            ${t('snapVentureGoal')}
                        </h4>
                        <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem;">
                            ${t('snapVentureGoalDesc')}
                        </p>
                    </div>
                </div>
            </div>
            
            <div style="background: white; padding: 24px; border-radius: 16px; margin-bottom: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); position: relative; overflow: hidden;">
                <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 4px; background: linear-gradient(180deg, #4ECDC4 0%, #44B3AA 100%);"></div>
                <div style="display: flex; align-items: start; gap: 12px;">
                    <div style="background: linear-gradient(135deg, #4ECDC4 0%, #44B3AA 100%); width: 40px; height: 40px; border-radius: 12px; display: flex; align-items: center; justify-content: center; flex-shrink: 0; box-shadow: 0 4px 12px rgba(78, 205, 196, 0.3);">
                        <span style="font-size: 1.3rem;">2Ô∏è‚É£</span>
                    </div>
                    <div style="flex: 1;">
                        <h4 style="color: #4ECDC4; margin: 0 0 10px 0; font-size: 1.15rem; font-weight: 700;">
                            ${t('howToPlay')}
                        </h4>
                        <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem;">
                            ${t('snapVentureRule1')}
                        </p>
                    </div>
                </div>
            </div>
            
            <div style="background: white; padding: 24px; border-radius: 16px; margin-bottom: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); position: relative; overflow: hidden;">
                <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 4px; background: linear-gradient(180deg, #FF6B6B 0%, #EE5A5A 100%);"></div>
                <div style="display: flex; align-items: start; gap: 12px; margin-bottom: 16px;">
                    <div style="background: linear-gradient(135deg, #FF6B6B 0%, #EE5A5A 100%); width: 40px; height: 40px; border-radius: 12px; display: flex; align-items: center; justify-content: center; flex-shrink: 0; box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3);">
                        <span style="font-size: 1.3rem;">3Ô∏è‚É£</span>
                    </div>
                    <div style="flex: 1;">
                        <h4 style="color: #FF6B6B; margin: 0; font-size: 1.15rem; font-weight: 700;">
                            ${t('gameRules')}
                        </h4>
                    </div>
                </div>
                <div style="display: flex; flex-direction: column; gap: 10px; margin-left: 52px;">
                    <div style="background: #F8FAFC; padding: 14px 16px; border-radius: 12px; border: 1px solid #E2E8F0;">
                        <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem;">
                            ${t('snapVentureGameRule1')}
                        </p>
                    </div>
                    <div style="background: #F8FAFC; padding: 14px 16px; border-radius: 12px; border: 1px solid #E2E8F0;">
                        <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem;">
                            ${t('snapVentureGameRule2')}
                        </p>
                    </div>
                </div>
            </div>
            
            <div style="background: white; padding: 24px; border-radius: 16px; margin-bottom: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.08); position: relative; overflow: hidden;">
                <div style="position: absolute; left: 0; top: 0; bottom: 0; width: 4px; background: linear-gradient(180deg, #FFA502 0%, #FF8C00 100%);"></div>
                <div style="display: flex; align-items: start; gap: 12px; margin-bottom: 16px;">
                    <div style="background: linear-gradient(135deg, #FFA502 0%, #FF8C00 100%); width: 40px; height: 40px; border-radius: 12px; display: flex; align-items: center; justify-content: center; flex-shrink: 0; box-shadow: 0 4px 12px rgba(255, 165, 2, 0.3);">
                        <span style="font-size: 1.3rem;">4Ô∏è‚É£</span>
                    </div>
                    <div style="flex: 1;">
                        <h4 style="color: #FFA502; margin: 0 0 10px 0; font-size: 1.15rem; font-weight: 700;">
                            ${t('missionStep4')}
                        </h4>
                        <p style="margin: 0 0 16px 0; color: #475569; line-height: 1.7; font-size: 0.95rem;">
                            ${t('missionStep4Desc')}
                        </p>
                    </div>
                </div>
                <div style="display: flex; flex-direction: column; gap: 10px;">
                        <div style="display: flex; align-items: center; gap: 12px; background: #F8FAFC; padding: 12px 14px; border-radius: 10px; border: 1px solid #E2E8F0;">
                            <span style="font-size: 1.3rem;">üìñ</span>
                            <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem; flex: 1;">${t('missionStep4Sub1')}</p>
                        </div>
                        <div style="display: flex; align-items: center; gap: 12px; background: #F8FAFC; padding: 12px 14px; border-radius: 10px; border: 1px solid #E2E8F0;">
                            <span style="font-size: 1.3rem;">üí≠</span>
                            <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem; flex: 1;">${t('missionStep4Sub2')}</p>
                        </div>
                        <div style="display: flex; align-items: center; gap: 12px; background: #F8FAFC; padding: 12px 14px; border-radius: 10px; border: 1px solid #E2E8F0;">
                            <span style="font-size: 1.3rem;">üì∏</span>
                            <p style="margin: 0; color: #475569; line-height: 1.7; font-size: 0.95rem; flex: 1;">${t('missionStep4Sub3')}</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 20px; padding: 20px 24px; background: linear-gradient(135deg, #667EEA 0%, #764BA2 100%); color: white; border-radius: 16px; font-weight: 700; font-size: 1.05rem; box-shadow: 0 8px 24px rgba(102, 126, 234, 0.3);">
                ${t('enjoyAdventure')}
            </div>
        `;
    } else if (gameType === 'wordguessing') {
        rulesContent.innerHTML = `
            <h4>${t('wordGuessingTitle')}</h4>
            <p><strong>${t('goal')}</strong> ${t('wordGuessingGoalDesc')}</p>
            
            <h4>${t('howToPlay')}</h4>
            <ul>
                <li><span class="rule-emoji">üë•</span> ${t('wordGuessingRule1')}</li>
                <li><span class="rule-emoji">‚ùì</span> ${t('wordGuessingRule2')}</li>
                <li><span class="rule-emoji">‚úÖ</span> ${t('wordGuessingRule3')}</li>
                <li><span class="rule-emoji">üèÜ</span> ${t('wordGuessingRule4')}</li>
            </ul>
            
            <h4>${t('gameRules')}</h4>
            <ul>
                <li><span class="rule-emoji">üìµ</span> ${t('wordGuessingGameRule1')}</li>
                <li><span class="rule-emoji">‚è∞</span> ${t('wordGuessingGameRule2')}</li>
                <li><span class="rule-emoji">üöó</span> ${t('wordGuessingGameRule3')}</li>
                <li><span class="rule-emoji">ü§ù</span> ${t('wordGuessingGameRule4')}</li>
            </ul>
            
            <p style="text-align: center; margin-top: 20px; color: #4ECDC4; font-weight: bold;">
                ${t('enjoyThinking')}
            </p>
        `;
    }
    
    document.getElementById('rulesModal').style.display = 'block';
}

function acceptRules() {
    document.getElementById('rulesModal').style.display = 'none';
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Snapventure = ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Solo
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Word Guessing = ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Join Team ‡πÄ‡∏•‡∏¢ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ)
    if (currentGame === 'snapventure') {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Solo
        showCreateSoloRoom();
    } else if (currentGame === 'wordguessing') {
        // Word Guessing - ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Join Team ‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏°)
        showJoinTeamPage();
    } else {
        // ‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏° (‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°)
        document.getElementById('gameMenu').style.display = 'block';
        updatePageLanguage();
    }
}

function selectGame(gameType) {
    console.log('üéÆ selectGame called with:', gameType);
    
    try {
        currentGame = gameType;
        localStorage.setItem(STORAGE_CURRENT_GAME, gameType);
        
        // Update game menu title and description
        const config = GAME_CONFIG[gameType];
        if (!config) {
            console.error('‚ùå Game config not found for:', gameType);
            return;
        }
        
        // Hide welcome
        const welcomeEl = document.getElementById('welcome');
        if (welcomeEl) {
            welcomeEl.style.display = 'none';
        }
        
        // Snapventure = Solo Play (‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏¢)
        // Word Guessing = Team Play (‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏°)
        if (gameType === 'snapventure') {
            // ‡πÅ‡∏™‡∏î‡∏á rules ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Solo
            showGameRules(gameType);
        } else {
            // Word Guessing - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏° (‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°)
            const gameMenuHeader = document.getElementById('gameMenuHeader');
            
            if (gameMenuHeader) {
                if (gameType === 'wordguessing') {
                    // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ banner ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Word Guessing
                    gameMenuHeader.className = 'header header-with-banner';
                    gameMenuHeader.innerHTML = `
                        <button class="back-btn" onclick="backToWelcome()"><span data-i18n="back">‚Üê ‡∏Å‡∏•‡∏±‡∏ö</span></button>
                        <img src="wordguessing-btn.png" alt="Word Guessing" class="header-banner" style="margin-top: 10px;">
                    `;
                } else {
                    // ‡πÉ‡∏ä‡πâ text ‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    gameMenuHeader.className = 'header';
                    gameMenuHeader.innerHTML = `
                        <button class="back-btn" onclick="backToWelcome()"><span data-i18n="back">‚Üê ‡∏Å‡∏•‡∏±‡∏ö</span></button>
                        <h1 id="gameMenuTitle">${config.icon} ${config.name}</h1>
                        <p class="subtitle" id="gameMenuDesc">${config.description}</p>
                    `;
                }
                
                // Update language after creating new HTML
                updatePageLanguage();
            }
            
            // Show rules popup first
            showGameRules(gameType);
        }
        
        console.log('‚úÖ selectGame completed');
    } catch (error) {
        console.error('‚ùå Error in selectGame:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
}

function backToWelcome() {
    // ‡∏ã‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    document.getElementById('gameMenu').style.display = 'none';
    document.getElementById('createTeam').style.display = 'none';
    document.getElementById('joinTeam').style.display = 'none';
    document.getElementById('teamCodeDisplay').style.display = 'none';
    document.getElementById('gameBoard').style.display = 'none';
    document.getElementById('publicScoreboard').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'none';
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    document.getElementById('welcome').style.display = 'block';
    
    // Clear session
    clearSession();
    currentGame = null;
    localStorage.removeItem(STORAGE_CURRENT_GAME);
    
    // Update language after navigation
    updatePageLanguage();
}

// ================================================
// Validate Name Format
// ================================================
function validateNameFormat(name) {
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠.‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•3‡∏ï‡∏±‡∏ß (‡πÄ‡∏ä‡πà‡∏ô Warapon.lea)
    const namePattern = /^[A-Za-z]+\.[A-Za-z]{3}$/;
    return namePattern.test(name);
}

// ================================================
// Create Team / Solo Room
// ================================================
async function createTeam() {
    const leaderName = document.getElementById('leaderNameInput').value.trim();
    
    if (!currentGame) {
        alert(t('selectGameFirst'));
        return;
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Snapventure (Solo) = ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Word Guessing (Team) = ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏î‡πâ‡∏ß‡∏¢
    if (currentGame === 'snapventure') {
        // Solo Mode - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        if (!leaderName) {
            alert(t('pleaseEnterName'));
            return;
        }
        
        // Validate name format
        if (!validateNameFormat(leaderName)) {
            alert('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠.‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•3‡∏ï‡∏±‡∏ß\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Warapon.lea');
            return;
        }
        
        try {
            // ‡πÉ‡∏ä‡πâ timestamp ‡πÄ‡∏õ‡πá‡∏ô ID (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™)
            const playerId = `player_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            currentTeamId = playerId;
            currentUserName = leaderName;
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase key
            const memberKey = sanitizeFirebaseKey(leaderName);
            
            const playerData = {
                name: leaderName,  // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á)
                playerName: leaderName,
                teamCode: playerId,
                game: currentGame,
                score: 0,
                createdAt: Date.now(),
                isSolo: true,  // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
                members: {
                    [memberKey]: {  // ‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                        name: leaderName,  // ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                        role: 'player',
                        joinedAt: Date.now()
                    }
                },
                missions: {}
            };
            
            // Save to game-specific path (‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
            await db.ref(`games/${currentGame}/teams/${playerId}`).set(playerData);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
            saveSession(playerId, leaderName);
            
            // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™)
            document.getElementById('createTeam').style.display = 'none';
            document.getElementById('gameBoard').style.display = 'block';
            loadGameBoard();
            
        } catch (error) {
            console.error('Error creating solo room:', error);
            alert(t('errorOccurred'));
        }
        
    } else {
        // Team Mode (Word Guessing) - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏î‡πâ‡∏ß‡∏¢
        const teamName = document.getElementById('teamNameInput').value.trim();
        
        if (!teamName || !leaderName) {
            alert(t('pleaseFillAll'));
            return;
        }
        
        // Validate name format
        if (!validateNameFormat(leaderName)) {
            alert('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠.‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•3‡∏ï‡∏±‡∏ß\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Warapon.lea');
            return;
        }
        
        try {
            const teamCode = generateTeamCode();
            currentTeamId = teamCode;
            currentUserName = leaderName;
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase key
            const memberKey = sanitizeFirebaseKey(leaderName);
            
            const teamData = {
                name: teamName,
                teamCode: teamCode,
                game: currentGame,
                score: 0,
                createdAt: Date.now(),
                isSolo: false,  // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡∏°
                members: {
                    [memberKey]: {  // ‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                        name: leaderName,  // ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                        role: 'leader',
                        joinedAt: Date.now()
                    }
                },
                missions: {}
            };
            
            // Save to game-specific path
            await db.ref(`games/${currentGame}/teams/${teamCode}`).set(teamData);
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
            saveSession(teamCode, leaderName);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡∏°
            document.getElementById('createTeam').style.display = 'none';
            document.getElementById('teamCodeDisplay').style.display = 'block';
            document.getElementById('displayTeamCode').textContent = teamCode;
            
        } catch (error) {
            console.error('Error creating team:', error);
            alert(t('errorOccurred'));
        }
    }
}

// ================================================
// Copy Team Code
// ================================================
function copyTeamCode() {
    const code = document.getElementById('displayTeamCode').textContent;
    navigator.clipboard.writeText(code).then(() => {
        alert('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß: ' + code);
    });
}

function copyCurrentTeamCode() {
    if (currentTeamId) {
        navigator.clipboard.writeText(currentTeamId).then(() => {
            alert('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß: ' + currentTeamId);
        });
    }
}

// ================================================
// Start Game
// ================================================
function startGame() {
    document.getElementById('teamCodeDisplay').style.display = 'none';
    document.getElementById('gameBoard').style.display = 'block';
    loadGameBoard();
}

// ================================================
// Join Team
// ================================================
async function joinTeamWithCode() {
    const teamCode = document.getElementById('teamCodeInput').value.trim().toUpperCase();
    const memberName = document.getElementById('memberNameInput').value.trim();
    
    if (!teamCode || !memberName) {
        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!');
        return;
    }
    
    if (teamCode.length !== 6) {
        alert('‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 6 ‡∏´‡∏•‡∏±‡∏Å!');
        return;
    }
    
    // Validate name format
    if (!validateNameFormat(memberName)) {
        alert('‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠.‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•3‡∏ï‡∏±‡∏ß\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Warapon.lea');
        return;
    }
    
    if (!currentGame) {
        alert(t('selectGameFirst'));
        return;
    }
    
    // üéØ AUTO-FILL CODE FROM URL PARAMETER
    // This code will be triggered when page loads with ?code=XXX parameter
    
    try {
        const memberKey = sanitizeFirebaseKey(memberName); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        
        // ‡∏•‡∏≠‡∏á join ‡∏ú‡πà‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Word Guessing)
        if (currentGame === 'wordguessing') {
            const roomRef = db.ref(`games/wordguessing/rooms/${teamCode}`);
            const roomSnapshot = await roomRef.once('value');
            
            if (roomSnapshot.exists()) {
                // ‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                const roomData = roomSnapshot.val();
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (roomData.members && roomData.members[memberKey]) {
                    alert('‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á!\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
                    return;
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                const maxMembers = roomData.maxMembers || 5;
                const currentMemberCount = roomData.members ? Object.keys(roomData.members).length : 0;
                
                if (currentMemberCount >= maxMembers) {
                    alert(`‚ùå ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!\n‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö ${maxMembers} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
                    return;
                }
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á (‡πÉ‡∏ä‡πâ memberKey ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö name ‡∏à‡∏£‡∏¥‡∏á)
                await roomRef.child(`members/${memberKey}`).set({
                    name: memberName, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    role: 'member',
                    joinedAt: Date.now()
                });
                
                currentTeamId = teamCode; // ‡πÉ‡∏ä‡πâ roomCode ‡πÄ‡∏õ‡πá‡∏ô teamId
                currentUserName = memberName;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á team entry ‡πÉ‡∏´‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠ compatibility ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
                const teamData = {
                    name: roomData.name,
                    teamCode: teamCode,
                    game: currentGame,
                    score: 0,
                    createdAt: roomData.createdAt || Date.now(),
                    isRoom: true, // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á
                    members: {},
                    missions: {}
                };
                
                // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ team entry ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
                const teamRef = db.ref(`games/${currentGame}/teams/${teamCode}`);
                const teamSnapshot = await teamRef.once('value');
                if (!teamSnapshot.exists()) {
                    await teamRef.set(teamData);
                }
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô team entry ‡∏î‡πâ‡∏ß‡∏¢ (‡πÉ‡∏ä‡πâ memberKey ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö name ‡∏à‡∏£‡∏¥‡∏á)
                await teamRef.child(`members/${memberKey}`).set({
                    name: memberName, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
                    role: 'member',
                    joinedAt: Date.now()
                });
                
                // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
                saveSession(teamCode, memberName);
                
                // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°
                document.getElementById('joinTeam').style.display = 'none';
                document.getElementById('gameBoard').style.display = 'block';
                loadGameBoard();
                
                return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Word Guessing ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏µ‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
        let teamRef = db.ref(`games/${currentGame}/teams/${teamCode}`);
        let snapshot = await teamRef.once('value');
        
        if (!snapshot.exists()) {
            alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            return;
        }
        
        const teamData = snapshot.val();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (teamData.members && teamData.members[memberKey]) {
            alert('‚ö†Ô∏è ‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ó‡∏µ‡∏°!\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
            return;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        const settingsSnapshot = await firebase.database().ref(`games/${currentGame}/settings/maxMembers`).once('value');
        const maxMembers = settingsSnapshot.val() || 5;
        const currentMemberCount = teamData.members ? Object.keys(teamData.members).length : 0;
        
        if (currentMemberCount >= maxMembers) {
            alert(`‚ùå ‡∏ó‡∏µ‡∏°‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!\n‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö ${maxMembers} ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`);
            return;
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡∏° (‡πÉ‡∏ä‡πâ memberKey ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö name ‡∏à‡∏£‡∏¥‡∏á)
        await teamRef.child(`members/${memberKey}`).set({
            name: memberName, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á
            role: 'member',
            joinedAt: Date.now()
        });
        
        currentTeamId = teamCode;
        currentUserName = memberName;
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
        saveSession(teamCode, memberName);
        
        // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°
        document.getElementById('joinTeam').style.display = 'none';
        document.getElementById('gameBoard').style.display = 'block';
        loadGameBoard();
        
    } catch (error) {
        console.error('Error joining team:', error);
        alert(t('errorOccurred'));
    }
}

// ================================================
// Load Game Board
// ================================================
function loadGameBoard() {
    if (!currentGame) return;
    
    const teamRef = db.ref(`games/${currentGame}/teams/${currentTeamId}`);
    
    // Listen to team data
    teamRef.on('value', snapshot => {
        const teamData = snapshot.val();
        if (!teamData) return;
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Snapventure (Solo) = ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Word Guessing (Team) = ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
        const isSolo = teamData.isSolo || currentGame === 'snapventure';
        
        if (isSolo) {
            // Solo Mode - ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            document.getElementById('teamName').textContent = teamData.playerName || teamData.name || currentUserName;
        } else {
            // Team Mode - ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
            document.getElementById('teamName').textContent = teamData.name || teamData.teamName || '‡∏ó‡∏µ‡∏°';
        }
        
        document.getElementById('teamScore').textContent = teamData.score || 0;
        
        // ‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
        const membersSection = document.querySelector('.members-section');
        if (isSolo) {
            // Solo Mode - ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™
            if (membersSection) {
                membersSection.style.display = 'none';
            }
        } else {
            // Team Mode - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™
            if (membersSection) {
                membersSection.style.display = 'block';
            }
            
            // Update members
            const members = teamData.members || {};
            const membersList = document.getElementById('membersList');
            const memberCount = Object.keys(members).length;
            document.getElementById('memberCount').textContent = memberCount;
            
            membersList.innerHTML = '';
            
            const membersArray = Object.values(members);
            const SHOW_LIMIT = 5 ; // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
            const visibleContainer = document.createElement('div');
            visibleContainer.id = 'visibleMembers';
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô
            const hiddenContainer = document.createElement('div');
            hiddenContainer.id = 'hiddenMembers';
            hiddenContainer.style.display = 'none';
            
            membersArray.forEach((member, index) => {
                const tag = document.createElement('div');
                tag.className = `member-tag ${member.role === 'leader' ? 'leader' : ''}`;
                
                const avatar = document.createElement('div');
                avatar.className = 'member-avatar';
                avatar.textContent = member.role === 'leader' ? 'üëë' : 'üë§';
                
                const info = document.createElement('div');
                info.className = 'member-info';
                
                const name = document.createElement('div');
                name.className = 'member-name';
                name.textContent = member.name;
                
                const role = document.createElement('div');
                role.className = 'member-role';
                role.textContent = member.role === 'leader' ? t('teamLeader') : t('member');
                
                info.appendChild(name);
                info.appendChild(role);
                tag.appendChild(avatar);
                tag.appendChild(info);
                
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ã‡πà‡∏≠‡∏ô
                if (index < SHOW_LIMIT) {
                    visibleContainer.appendChild(tag);
                } else {
                    hiddenContainer.appendChild(tag);
                }
            });
            
            membersList.appendChild(visibleContainer);
            membersList.appendChild(hiddenContainer);
            
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô SHOW_LIMIT ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            if (memberCount > SHOW_LIMIT) {
                const toggleBtn = document.createElement('button');
                toggleBtn.className = 'toggle-members-btn';
                toggleBtn.innerHTML = `üë• ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${memberCount} ‡∏Ñ‡∏ô)`;
                toggleBtn.onclick = () => {
                    const isHidden = hiddenContainer.style.display === 'none';
                    hiddenContainer.style.display = isHidden ? 'block' : 'none';
                    toggleBtn.innerHTML = isHidden 
                        ? `üë• ‡∏ã‡πà‡∏≠‡∏ô` 
                        : `üë• ‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${memberCount} ‡∏Ñ‡∏ô)`;
                };
                membersList.appendChild(toggleBtn);
            }
        }
        
        // Load missions
        loadMissions(teamData.missions || {});
        
        // Update completed missions count
        updateCompletedMissionsCount(teamData.missions || {});
    });
}

// ================================================
// Update Completed Missions Count
// ================================================
function updateCompletedMissionsCount(completedMissions) {
    if (!currentGame) return;
    
    // ‡∏ô‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (completed = true ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å revoke)
    const completedCount = Object.values(completedMissions).filter(mission => 
        mission.completed && !mission.revoked
    ).length;
    
    // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firebase
    firebase.database().ref(`games/${currentGame}/missions`).once('value', (snapshot) => {
        const missionsData = snapshot.val();
        const totalMissions = missionsData ? Object.keys(missionsData).length : 0;
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        const completedMissionsElement = document.getElementById('completedMissions');
        if (completedMissionsElement) {
            completedMissionsElement.textContent = `${completedCount}/${totalMissions}`;
        }
    });
}

// ================================================
// Load Missions (from Firebase)
// ================================================
function loadMissions(completedMissions) {
    const container = document.querySelector('.missions-container');
    container.innerHTML = '<p class="loading">üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à...</p>';
    
    if (!currentGame) {
        container.innerHTML = '<p class="empty-state">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡∏°‡∏Å‡πà‡∏≠‡∏ô</p>';
        return;
    }
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    firebase.database().ref(`games/${currentGame}/schedule`).once('value', (scheduleSnapshot) => {
        const schedule = scheduleSnapshot.val();
        const now = Date.now();
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ schedule ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
        if (schedule && schedule.start && now < schedule.start) {
            container.innerHTML = `
                <div class="schedule-message not-started">
                    <div class="schedule-icon">‚è≥</div>
                    <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</h3>
                    <p>‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</p>
                    <p class="schedule-time">${formatDateTime(schedule.start)}</p>
                </div>
            `;
            return;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ schedule ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        if (schedule && schedule.end && now > schedule.end) {
            container.innerHTML = `
                <div class="schedule-message ended">
                    <div class="schedule-icon">üèÅ</div>
                    <h3>‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡πâ‡∏ß</h3>
                    <p>‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠</p>
                    <p class="schedule-time">${formatDateTime(schedule.end)}</p>
                    <button class="leave-room-btn" onclick="leaveRoom()">
                        üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
                    </button>
                </div>
            `;
            return;
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ schedule)
        if (!currentGame) return;
        
        // Start countdown timer if schedule exists
        if (schedule && schedule.start && schedule.end) {
            startCountdownTimer(schedule.start, schedule.end);
        }
        
        firebase.database().ref(`games/${currentGame}/missions`).once('value', (snapshot) => {
            container.innerHTML = '';
            
            const missionsData = snapshot.val();
            if (!missionsData) {
                container.innerHTML = '<p class="empty-state">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>';
                return;
            }
            
            // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° id
            const missionsArray = Object.entries(missionsData)
                .map(([key, value]) => ({ key, ...value }))
                .sort((a, b) => a.id - b.id);
            
            missionsArray.forEach(mission => {
                const missionData = completedMissions[mission.id];
                const isCompleted = missionData && missionData.completed;
                const isRevoked = missionData && missionData.revoked;
                const isAttempted = missionData && missionData.attempted && !isCompleted; // ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà approved
                const completedBy = missionData ? missionData.completedBy : null;
                const revokedReason = missionData ? missionData.revokedReason : null;
                const card = createMissionCard(mission, isCompleted, isRevoked, completedBy, revokedReason, isAttempted);
                container.appendChild(card);
            });
        });
    });
}

function createMissionCard(mission, isCompleted, isRevoked, completedBy, revokedReason, isAttempted) {
    const card = document.createElement('div');
    card.className = `mission-card ${isCompleted ? 'completed' : ''} ${isRevoked ? 'revoked' : ''} ${isAttempted ? 'attempted' : ''}`;
    
    const missionType = mission.type || 'photo';
    
    // Get mission title in current language
    const missionTitle = (currentLanguage === 'en' && mission.title_en) ? mission.title_en : (mission.title_th || mission.title);
    
    // Show different messages based on status
    let statusText = '';
    if (isRevoked) {
        statusText = `
            <div style="background: #FFF5F5; border: 2px solid #FF6B6B; border-radius: 8px; padding: 10px; margin-top: 10px;">
                <div style="font-size: 0.9rem; color: #FF6B6B; font-weight: bold; margin-bottom: 5px;">
                    üö´ ${t('missionRevoked')}
                </div>
                <div style="font-size: 0.85rem; color: #C0392B;">
                    ${t('reason')}: ${revokedReason || t('failedCheck')}
                </div>
            </div>
        `;
    } else if (completedBy) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å (completed) ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î (attempted) 
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î
        statusText = `<div style="font-size: 0.85rem; color: #00D2A0; margin-top: 5px;">‚úì ${t('completedBy')} ${completedBy}</div>`;
    }
    
    // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const buttonIcon = missionType === 'quiz' ? '‚ùì' : 'üì∏';
    const buttonText = missionType === 'quiz' ? t('answerQuiz') : t('takePhoto');
    const clickFunction = missionType === 'quiz' ? `openQuizModal(${mission.id})` : `openPhotoModal(${mission.id})`;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à
    const typeBadge = missionType === 'quiz' 
        ? `<span class="mission-type-badge quiz">‚ùì ${t('answerQuiz')}</span>`
        : `<span class="mission-type-badge photo">üì∏ ${t('takePhoto')}</span>`;
    
    // Button state - ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ñ‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏¥‡∏î
    let buttonHTML = '';
    if (isRevoked) {
        buttonHTML = `
            <button class="mission-btn revoked" disabled>
                üö´ ${t('revoked')}
            </button>
        `;
    } else if (isCompleted || isAttempted) {
        // ‡∏ñ‡∏π‡∏Å (completed) ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î (attempted) = ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô (‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)
        buttonHTML = `
            <button class="mission-btn completed" disabled>
                ‚úì ${t('completed')}
            </button>
        `;
    } else {
        buttonHTML = `
            <button class="mission-btn" onclick="${clickFunction}">
                ${buttonIcon} ${buttonText}
            </button>
        `;
    }
    
    card.innerHTML = `
        <div class="mission-header">
            <div class="mission-title">${missionTitle}</div>
        </div>
        ${typeBadge}
        ${statusText}
        ${buttonHTML}
    `;
    
    return card;
}

// ================================================
// Photo Modal
// ================================================
function openPhotoModal(missionId) {
    currentMissionId = missionId;
    
    if (!currentGame) return;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å Firebase (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Quiz Modal)
    firebase.database().ref(`games/${currentGame}/missions`).once('value', (snapshot) => {
        const missionsData = snapshot.val();
        const missionEntry = Object.entries(missionsData || {}).find(([key, value]) => value.id === missionId);
        
        if (missionEntry) {
            const mission = missionEntry[1];
            // Get mission title in current language
            const missionTitle = (currentLanguage === 'en' && mission.title_en) ? mission.title_en : (mission.title_th || mission.title);
            document.getElementById('modalTitle').textContent = missionTitle;
        } else {
            // Fallback: ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô Firebase ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å missions array
            const mission = missions.find(m => m.id === missionId);
            if (mission) {
                const missionTitle = (currentLanguage === 'en' && mission.title_en) ? mission.title_en : (mission.title_th || mission.title);
                document.getElementById('modalTitle').textContent = missionTitle;
            }
        }
    });
    
    document.getElementById('photoPreview').innerHTML = '';
    document.getElementById('photoInput').value = '';
    document.getElementById('photoModal').style.display = 'block';
}

function closeModal() {
    document.getElementById('photoModal').style.display = 'none';
    currentMissionId = null;
}

// ================================================
// Quiz Modal
// ================================================
function openQuizModal(missionId) {
    currentMissionId = missionId;
    
    if (!currentGame) return;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å Firebase
    firebase.database().ref(`games/${currentGame}/missions`).once('value', (snapshot) => {
        const missionsData = snapshot.val();
        const missionEntry = Object.entries(missionsData).find(([key, value]) => value.id === missionId);
        
        if (missionEntry) {
            const mission = missionEntry[1];
            // Get mission title in current language
            const missionTitle = (currentLanguage === 'en' && mission.title_en) ? mission.title_en : (mission.title_th || mission.title);
            document.getElementById('quizModalTitle').textContent = missionTitle;
            document.getElementById('quizAnswerInput').value = '';
            document.getElementById('quizModal').style.display = 'block';
        }
    });
}

function closeQuizModal() {
    document.getElementById('quizModal').style.display = 'none';
    currentMissionId = null;
}

// ================================================
// Countdown Timer
// ================================================
let countdownInterval = null;

function startCountdownTimer(startTime, endTime) {
    const timerElement = document.getElementById('countdownTimer');
    
    // Clear existing interval
    if (countdownInterval) {
        clearInterval(countdownInterval);
    }
    
    function updateTimer() {
        const now = Date.now();
        const timeLeft = endTime - now;
        
        if (timeLeft <= 0) {
            // ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            timerElement.style.display = 'none';
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            // Reload missions to show ended message
            location.reload();
            return;
        }
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        let timeText = '';
        if (days > 0) {
            timeText = `${days} ‡∏ß‡∏±‡∏ô ${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`;
        } else if (hours > 0) {
            timeText = `${hours} ‡∏ä‡∏°. ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
        } else if (minutes > 0) {
            timeText = `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ ${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
        } else {
            timeText = `${seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
        }
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏´‡∏° (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        const isWarning = timeLeft < (60 * 60 * 1000);
        
        timerElement.className = `countdown-timer ${isWarning ? 'warning' : ''}`;
        timerElement.innerHTML = `
            <span class="timer-icon">${isWarning ? '‚ö†Ô∏è' : '‚è∞'}</span>
            <span class="timer-text">‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤: ${timeText}</span>
        `;
        timerElement.style.display = 'flex';
    }
    
    // Update ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    updateTimer();
    
    // Update ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    countdownInterval = setInterval(updateTimer, 1000);
}

async function submitQuizAnswer() {
    if (!currentGame) return;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    const scheduleSnapshot = await firebase.database().ref(`games/${currentGame}/schedule`).once('value');
    const schedule = scheduleSnapshot.val();
    const now = Date.now();
    
    if (schedule) {
        if (now < schedule.start) {
            alert(t('notStartedYet'));
            closeQuizModal();
            return;
        }
        if (now > schedule.end) {
            alert(t('timeExpired'));
            closeQuizModal();
            return;
        }
    }
    
    const userAnswer = document.getElementById('quizAnswerInput').value.trim();
    
    if (!userAnswer) {
        alert(t('enterAnswer'));
        return;
    }
    
    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å Firebase
        const missionsSnapshot = await firebase.database().ref(`games/${currentGame}/missions`).once('value');
        const missionsData = missionsSnapshot.val();
        const missionEntry = Object.entries(missionsData).find(([key, value]) => value.id === currentMissionId);
        
        if (!missionEntry) {
            alert(t('missionNotFound'));
            return;
        }
        
        const [missionKey, mission] = missionEntry;
        
        // Check both language answers (backward compatible)
        const correctAnswer_th = mission.answer_th || mission.answer || '';
        const correctAnswer_en = mission.answer_en || '';
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å-‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞ auto-approve ‡∏´‡∏£‡∏∑‡∏≠ pending
        const userAnswerLower = userAnswer.toLowerCase().trim();
        const isCorrect_th = userAnswerLower === correctAnswer_th.toLowerCase().trim();
        const isCorrect_en = correctAnswer_en && userAnswerLower === correctAnswer_en.toLowerCase().trim();
        const isCorrect = isCorrect_th || isCorrect_en;
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°
        const teamRef = firebase.database().ref(`games/${currentGame}/teams/${currentTeamId}`);
        const snapshot = await teamRef.once('value');
        const teamData = snapshot.val();
        
        if (!teamData) {
            alert(t('teamNotFound'));
            return;
        }
        
        const timestamp = Date.now();
        let submissionStatus = 'pending';
        let shouldAwardPoints = false;
        
        // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å: auto-approve ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if (isCorrect) {
            submissionStatus = 'approved';
            shouldAwardPoints = true;
            
            // Update mission as completed
            await teamRef.child(`missions/${currentMissionId}`).set({
                completed: true,
                completedBy: currentUserName,
                answer: userAnswer,
                timestamp: timestamp
            });
            
            // Update score immediately
            const newScore = (teamData.score || 0) + mission.points;
            await teamRef.child('score').set(newScore);
        } else {
            // ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á: ‡∏•‡πá‡∏≠‡∏Ñ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à (‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥), ‡∏£‡∏≠ admin ‡∏ï‡∏£‡∏ß‡∏à
            await teamRef.child(`missions/${currentMissionId}`).set({
                completed: false,
                attempted: true,  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
                completedBy: currentUserName,
                answer: userAnswer,
                timestamp: timestamp,
                status: 'pending'
            });
        }
        
        // Save submission record for admin review
        const submissionRef = firebase.database().ref(`games/${currentGame}/submissions`).push();
        await submissionRef.set({
            teamId: currentTeamId,
            teamName: teamData.name || 'Unknown Team',
            missionId: currentMissionId,
            missionTitle: mission.title || 'Unknown Mission',
            missionPoints: mission.points || 0,
            missionType: 'quiz',
            submittedBy: currentUserName || 'Unknown',
            userAnswer: userAnswer,
            correctAnswer_th: correctAnswer_th,
            correctAnswer_en: correctAnswer_en,
            timestamp: timestamp,
            status: submissionStatus
        });
        
        closeQuizModal();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î)
        alert(t('answerSubmittedSuccess'));
        loadGameBoard();
        
    } catch (error) {
        console.error('Error:', error);
        alert(`${t('errorOccurred')} ${error.message}`);
    }
}

// ================================================
// Photo Input Handler
// ================================================
document.addEventListener('DOMContentLoaded', () => {
    // ================================================
    // Event Delegation for All Buttons
    // ================================================
    
    // Use event delegation on document body
    document.body.addEventListener('click', (e) => {
        const target = e.target.closest('[data-game], [data-admin-game], [data-tab], #adminMenuBtn');
        
        if (!target) return;
        
        // Game selection (Snap Venture, Word Guessing)
        if (target.dataset.game) {
            e.preventDefault();
            selectGame(target.dataset.game);
        }
        
        // Admin menu button
        if (target.id === 'adminMenuBtn') {
            e.preventDefault();
            showAdmin();
        }
        
        // Admin game selector
        if (target.dataset.adminGame) {
            e.preventDefault();
            selectAdminGame(target.dataset.adminGame);
        }
        
        // Admin tabs
        if (target.dataset.tab) {
            e.preventDefault();
            showAdminTab(target.dataset.tab);
        }
    });
    
    // ================================================
    // Photo Input Preview
    // ================================================
    const photoInput = document.getElementById('photoInput');
    
    if (photoInput) {
        photoInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const preview = document.getElementById('photoPreview');
                    preview.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
                };
                reader.readAsDataURL(file);
            }
        });
    }
    
    // ================================================
    // Name Format Validation with Visual Feedback
    // ================================================
    const nameInputs = [
        document.getElementById('leaderNameInput'),
        document.getElementById('memberNameInput')
    ];
    
    nameInputs.forEach(input => {
        if (input) {
            input.addEventListener('input', (e) => {
                const value = e.target.value.trim();
                const isValid = validateNameFormat(value);
                
                if (value.length > 0) {
                    if (isValid) {
                        e.target.style.borderColor = '#28a745';
                        e.target.style.background = '#d4edda';
                    } else {
                        e.target.style.borderColor = '#dc3545';
                        e.target.style.background = '#f8d7da';
                    }
                } else {
                    e.target.style.borderColor = '';
                    e.target.style.background = '';
                }
            });
        }
    });
    
    // Initialize Firebase
    initFirebase();
});

// ================================================
// Submit Mission
// ================================================
async function submitMission() {
    if (!currentGame) return;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    const scheduleSnapshot = await firebase.database().ref(`games/${currentGame}/schedule`).once('value');
    const schedule = scheduleSnapshot.val();
    const now = Date.now();
    
    if (schedule) {
        if (now < schedule.start) {
            alert(t('notTimeYet'));
            closeModal();
            return;
        }
        if (now > schedule.end) {
            alert(t('timeExpiredAlert'));
            closeModal();
            return;
        }
    }
    
    const photoInput = document.getElementById('photoInput');
    const file = photoInput.files[0];
    
    if (!file) {
        alert(t('takePhotoFirst'));
        return;
    }
    
    // Get mission from Firebase
    const missionsSnapshot = await firebase.database().ref(`games/${currentGame}/missions`).once('value');
    const missionsData = missionsSnapshot.val();
    const missionEntry = Object.entries(missionsData).find(([key, value]) => value.id === currentMissionId);
    const mission = missionEntry ? missionEntry[1] : null;
    
    if (!mission) {
        alert(t('missionNotFound'));
        return;
    }
    
    try {
        const submitBtn = document.querySelector('.submit-btn');
        submitBtn.innerHTML = '<div class="loading"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
        submitBtn.disabled = true;
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô Base64
        const reader = new FileReader();
        reader.onload = async (e) => {
            const photoBase64 = e.target.result;
            
            const teamRef = db.ref(`games/${currentGame}/teams/${currentTeamId}`);
            const snapshot = await teamRef.once('value');
            const teamData = snapshot.val();
            
            if (!teamData) {
                alert(t('teamNotFound'));
                return;
            }
            
            const timestamp = Date.now();
            
            // Update mission in team
            await teamRef.child(`missions/${currentMissionId}`).set({
                completed: true,
                completedBy: currentUserName,
                photoBase64: photoBase64,
                timestamp: timestamp
            });
            
            // Update score (immediate points)
            const newScore = (teamData.score || 0) + mission.points;
            await teamRef.child('score').set(newScore);
            
            // Save submission record for admin review
            const submissionRef = db.ref(`games/${currentGame}/submissions`).push();
            await submissionRef.set({
                teamId: currentTeamId,
                teamName: teamData.name || 'Unknown Team',
                missionId: currentMissionId,
                missionTitle: mission.title || 'Unknown Mission',
                missionPoints: mission.points || 0,
                missionType: 'photo',
                submittedBy: currentUserName || 'Unknown',
                photoBase64: photoBase64,
                timestamp: timestamp,
                status: 'approved' // default status
            });
            
            closeModal();
            alert(`${t('missionSuccessAlert')} ${currentUserName} ${t('missionCompletedBy')}`);
        };
        
        reader.readAsDataURL(file);
        
    } catch (error) {
        console.error('Error submitting mission:', error);
        alert(t('submissionError'));
    }
}

// ================================================
// Calculate Average Completion Time (Tiebreaker)
// ================================================
function calculateAverageCompletionTime(missions) {
    if (!missions) return Infinity; // ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    
    const completedMissions = Object.values(missions).filter(m => m.completed && m.timestamp);
    
    if (completedMissions.length === 0) return Infinity;
    
    // ‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏£‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥ (timestamp ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
    const timestamps = completedMissions.map(m => m.timestamp);
    const firstTime = Math.min(...timestamps);
    const lastTime = Math.max(...timestamps);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    const totalTime = lastTime - firstTime;
    
    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏±‡πâ‡∏ô
    if (completedMissions.length === 1) {
        return timestamps[0];
    }
    
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à
    return totalTime / completedMissions.length;
}

// ================================================
// Public Scoreboard
// ================================================
function loadPublicScoreboard() {
    const container = document.getElementById('publicScoresContainer');
    
    // Real-time listener
    db.ref('teams').on('value', snapshot => {
        const teams = [];
        snapshot.forEach(childSnapshot => {
            const team = childSnapshot.val();
            const avgTime = calculateAverageCompletionTime(team.missions);
            teams.push({
                code: childSnapshot.key,
                name: team.teamName,
                score: team.score || 0,
                members: team.members ? Object.keys(team.members).length : 0,
                missions: team.missions ? Object.keys(team.missions).length : 0,
                avgCompletionTime: avgTime
            });
        });
        
        // Sort by score (descending), then by average time (ascending - faster is better)
        teams.sort((a, b) => {
            if (b.score !== a.score) {
                return b.score - a.score; // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞
            }
            // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô -> ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏ä‡∏ô‡∏∞
            return a.avgCompletionTime - b.avgCompletionTime;
        });
        
        // Display
        container.innerHTML = '';
        teams.forEach((team, index) => {
            const card = createScoreCard(team, index + 1);
            container.appendChild(card);
        });
        
        if (teams.length === 0) {
            container.innerHTML = '<p style="text-align: center; color: #636E72; padding: 40px;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°</p>';
        }
    });
}

// ================================================
// Admin Scoreboard
// ================================================
function loadAdminScoreboard() {
    const container = document.getElementById('adminScoresContainer');
    const gameName = GAME_CONFIG[currentAdminGame].name;
    const gameIcon = GAME_CONFIG[currentAdminGame].icon;
    const isSolo = currentAdminGame === 'snapventure';
    
    // Update game display
    if (isSolo) {
        document.getElementById('currentGameDisplay').innerHTML = `${gameIcon} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° <strong>${gameName}</strong>`;
    } else {
        document.getElementById('currentGameDisplay').innerHTML = `${gameIcon} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° <strong>${gameName}</strong>`;
    }
    
    db.ref(`games/${currentAdminGame}/teams`).on('value', snapshot => {
        const teams = [];
        snapshot.forEach(childSnapshot => {
            const team = childSnapshot.val();
            const avgTime = calculateAverageCompletionTime(team.missions);
            
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Solo Mode ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô, ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Team Mode ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
            const displayName = isSolo 
                ? (team.playerName || team.name || 'Unknown Player')
                : (team.name || team.teamName || 'Unknown Team');
            
            teams.push({
                code: childSnapshot.key,
                name: displayName,
                score: team.score || 0,
                members: team.members ? Object.keys(team.members).length : 0,
                missions: team.missions ? Object.keys(team.missions).length : 0,
                membersList: team.members || {},
                avgCompletionTime: avgTime,
                isSolo: isSolo
            });
        });
        
        // Sort by score (descending), then by average time (ascending)
        teams.sort((a, b) => {
            if (b.score !== a.score) {
                return b.score - a.score;
            }
            return a.avgCompletionTime - b.avgCompletionTime;
        });
        
        container.innerHTML = '';
        teams.forEach((team, index) => {
            const card = createAdminScoreCard(team, index + 1, currentAdminGame);
            container.appendChild(card);
        });
        
        if (teams.length === 0) {
            const entityName = isSolo ? '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô' : '‡∏ó‡∏µ‡∏°';
            container.innerHTML = `<p style="text-align: center; color: #636E72; padding: 40px;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ${entityName}‡πÉ‡∏ô ${gameName}</p>`;
        }
    });
}

function createScoreCard(team, rank) {
    const card = document.createElement('div');
    card.className = `score-card ${rank === 1 ? 'first' : ''}`;
    
    const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : '';
    
    card.innerHTML = `
        <div class="team-info">
            <div class="team-detail">
                <div class="rank">#${rank}</div>
                <div class="team-name">${medal} ${team.name}</div>
            </div>
            <div class="team-members-count">üë• ${team.members} ‡∏Ñ‡∏ô</div>
            <div class="team-missions-count">‚úì ${team.missions}/${missions.length} ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</div>
        </div>
        <div class="team-score">${team.score}</div>
    `;
    
    return card;
}

function createAdminScoreCard(team, rank, gameType) {
    const card = document.createElement('div');
    card.className = `score-card ${rank === 1 ? 'first' : ''}`;
    
    const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : '';
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡∏°
    const isSolo = team.isSolo || gameType === 'snapventure';
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡∏°)
    const membersHTML = !isSolo ? Object.values(team.membersList)
        .map(m => {
            const icon = m.role === 'leader' ? 'üëë' : 'üë§';
            const roleClass = m.role === 'leader' ? 'leader' : 'member';
            return `<span class="admin-member-badge ${roleClass}">${icon} ${m.name}</span>`;
        })
        .join('') : '';
    
    // HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß vs ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡∏°  
    const detailsHTML = isSolo ? `
        <div class="team-missions-count">‚úì ${team.missions} ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</div>
    ` : `
        <div class="team-code">‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡∏°: <strong>${team.code}</strong></div>
        <div class="admin-members-list">
            <div class="admin-members-label">üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${team.members} ‡∏Ñ‡∏ô:</div>
            <div class="admin-members-tags">${membersHTML}</div>
        </div>
        <div class="team-missions-count">‚úì ${team.missions} ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</div>
    `;
    
    card.innerHTML = `
        <div class="team-info">
            <div class="team-detail">
                <div class="rank">#${rank}</div>
                <div class="team-name">${medal} ${team.name}</div>
            </div>
            ${detailsHTML}
            <div style="margin-top: 10px; display: flex; gap: 10px;">
                <button class="view-photo-btn" onclick="event.stopPropagation(); showTeamPhotos({code: '${team.code}', name: '${team.name}'}, '${gameType}')" style="flex: 1;">
                    üì∏ ‡∏î‡∏π‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                </button>
                <button class="view-photo-btn" onclick="event.stopPropagation(); showTeamSubmissions('${team.code}', '${team.name}')" style="flex: 1;">
                    üìã ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô
                </button>
            </div>
        </div>
        <div class="team-score">${team.score}</div>
    `;
    
    return card;
}

// ================================================
// Show Team Photos
// ================================================
async function showTeamPhotos(team, gameType) {
    document.getElementById('adminPanel').style.display = 'none';
    document.getElementById('teamPhotosPanel').style.display = 'block';
    document.getElementById('photoPanelTeamName').textContent = `üì∏ ${team.name}`;
    
    const container = document.getElementById('photoMissionsContainer');
    container.innerHTML = '<p style="text-align: center; color: #636E72;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>';
    
    try {
        const teamRef = db.ref(`games/${gameType}/teams/${team.code}`);
        const snapshot = await teamRef.once('value');
        const teamData = snapshot.val();
        const completedMissions = teamData.missions || {};
        
        // Get missions for this game
        const missionsSnapshot = await db.ref(`games/${gameType}/missions`).once('value');
        const missionsData = missionsSnapshot.val();
        const gameMissions = missionsData ? Object.values(missionsData) : [];
        
        container.innerHTML = '';
        
        gameMissions.forEach(mission => {
            const missionData = completedMissions[mission.id];
            const card = createPhotoCard(mission, missionData, team.name);
            container.appendChild(card);
        });
        
        if (Object.keys(completedMissions).length === 0) {
            container.innerHTML = '<p style="text-align: center; color: #636E72; padding: 40px;">‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏î‡πÜ</p>';
        }
        
    } catch (error) {
        console.error('Error loading photos:', error);
        container.innerHTML = '<p style="text-align: center; color: #FF6B6B;">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</p>';
    }
}

function createPhotoCard(mission, missionData, teamName) {
    const card = document.createElement('div');
    card.className = 'photo-card';
    
    if (missionData && missionData.completed) {
        const timestamp = new Date(missionData.timestamp);
        const dateStr = timestamp.toLocaleString('th-TH');
        
        card.innerHTML = `
            <div class="photo-card-header">
                <div class="photo-mission-title">${mission.title}</div>
                <div class="photo-points">+${mission.points}</div>
            </div>
            <div class="photo-info">
                <div>‚úì ‡∏ó‡∏≥‡πÇ‡∏î‡∏¢: <strong>${missionData.completedBy}</strong></div>
                <div>üïê ${dateStr}</div>
            </div>
            <div class="photo-image-container">
                <img src="${missionData.photoBase64}" alt="${mission.title}" 
                     onclick="openPhotoLightbox('${missionData.photoBase64}', '${mission.title}', '${teamName}', '${missionData.completedBy}')">
            </div>
        `;
    } else {
        card.className = 'photo-card incomplete';
        card.innerHTML = `
            <div class="photo-card-header">
                <div class="photo-mission-title">${mission.title}</div>
                <div class="photo-points">+${mission.points}</div>
            </div>
            <div class="photo-status">‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥</div>
        `;
    }
    
    return card;
}

function backToAdminPanel() {
    document.getElementById('teamPhotosPanel').style.display = 'none';
    document.getElementById('adminPanel').style.display = 'block';
}

// ================================================
// Photo Lightbox
// ================================================
function openPhotoLightbox(photoSrc, missionTitle, teamName, completedBy) {
    const lightbox = document.createElement('div');
    lightbox.className = 'photo-lightbox';
    lightbox.onclick = () => document.body.removeChild(lightbox);
    
    lightbox.innerHTML = `
        <div class="lightbox-content" onclick="event.stopPropagation()">
            <span class="lightbox-close" onclick="this.parentElement.parentElement.remove()">√ó</span>
            <h3>${missionTitle}</h3>
            <p style="color: #636E72; margin: 10px 0;">‡∏ó‡∏µ‡∏°: ${teamName} | ‡∏ó‡∏≥‡πÇ‡∏î‡∏¢: ${completedBy}</p>
            <img src="${photoSrc}" alt="${missionTitle}">
        </div>
    `;
    
    document.body.appendChild(lightbox);
}

// ================================================
// Admin Functions
// ================================================
function resetAllScores() {
    const gameName = GAME_CONFIG[currentAdminGame].name;
    if (!confirm(`‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô ${gameName} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n(‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö ‡πÅ‡∏ï‡πà‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà)`)) {
        return;
    }
    
    db.ref(`games/${currentAdminGame}/teams`).once('value', snapshot => {
        const updates = {};
        snapshot.forEach(childSnapshot => {
            const teamCode = childSnapshot.key;
            updates[`games/${currentAdminGame}/teams/${teamCode}/score`] = 0;
            updates[`games/${currentAdminGame}/teams/${teamCode}/missions`] = null;
        });
        
        db.ref().update(updates).then(() => {
            alert(t('resetSuccess'));
        });
    });
}

function deleteAllTeams() {
    const gameName = GAME_CONFIG[currentAdminGame].name;
    if (!confirm(`${t('confirmDeleteTeams')} ${gameName} ${t('deleteTeamsConfirm')}`)) {
        return;
    }
    
    if (!confirm(t('areYouSure'))) {
        return;
    }
    
    db.ref(`games/${currentAdminGame}/teams`).remove().then(() => {
        alert(t('deleteSuccess'));
    });
}

// ================================================
// Admin Tab Management
// ================================================
function showAdminTab(tabName) {
    // ‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    document.getElementById('adminScoreboardTab').style.display = 'none';
    document.getElementById('adminSubmissionsTab').style.display = 'none';
    document.getElementById('adminRoomsTab').style.display = 'none';
    document.getElementById('adminMissionsTab').style.display = 'none';
    document.getElementById('adminScheduleTab').style.display = 'none';
    
    // ‡∏•‡∏ö active ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const tabs = document.querySelectorAll('.tab-btn');
    tabs.forEach(tab => tab.classList.remove('active'));
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (tabName === 'scoreboard') {
        document.getElementById('adminScoreboardTab').style.display = 'block';
        tabs[0].classList.add('active');
        loadAdminScoreboard();
    } else if (tabName === 'submissions') {
        document.getElementById('adminSubmissionsTab').style.display = 'block';
        tabs[1].classList.add('active');
        loadSubmissions();
    } else if (tabName === 'rooms') {
        document.getElementById('adminRoomsTab').style.display = 'block';
        tabs[2].classList.add('active');
        loadRoomsAdmin();
    } else if (tabName === 'missions') {
        document.getElementById('adminMissionsTab').style.display = 'block';
        tabs[3].classList.add('active');
        loadMissionsAdmin();
    } else if (tabName === 'schedule') {
        document.getElementById('adminScheduleTab').style.display = 'block';
        tabs[4].classList.add('active');
        loadScheduleSettings();
    }
}

// ================================================
// Rooms Management (Admin)
// ================================================
function loadRoomsAdmin() {
    const container = document.getElementById('roomsAdminContainer');
    container.innerHTML = '<p class="loading">üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á...</p>';
    
    // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á Word Guessing
    firebase.database().ref(`games/wordguessing/rooms`).on('value', (snapshot) => {
        container.innerHTML = '';
        
        const roomsData = snapshot.val();
        if (!roomsData || Object.keys(roomsData).length === 0) {
            container.innerHTML = `
                <p class="empty-state">
                    ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ<br>
                    ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‚ûï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
                </p>`;
            return;
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array
        const roomsArray = Object.entries(roomsData).map(([key, value]) => ({ 
            roomId: key, 
            ...value 
        }));
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á (‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
        roomsArray.sort((a, b) => b.createdAt - a.createdAt);
        
        roomsArray.forEach(room => {
            const memberCount = room.members ? Object.keys(room.members).length : 0;
            const maxMembers = room.maxMembers || 5;
            const isFull = memberCount >= maxMembers;
            
            const card = document.createElement('div');
            card.className = 'room-admin-card';
            card.innerHTML = `
                <div class="room-header">
                    <div class="room-title">
                        <h4>üè† ${room.name}</h4>
                        ${isFull ? '<span class="room-full-badge">üîí ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß</span>' : '<span class="room-available-badge">‚úì ‡∏ß‡πà‡∏≤‡∏á</span>'}
                    </div>
                    <div class="room-code-display">
                        <span class="room-code-label">‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á:</span>
                        <span class="room-code-value">${room.code}</span>
                        <button class="copy-small-btn" onclick="copyRoomCode('${room.code}')">üìã</button>
                    </div>
                </div>
                
                <div class="room-stats">
                    <div class="room-stat-item">
                        <span class="stat-icon">üë•</span>
                        <span>${memberCount}/${maxMembers} ‡∏Ñ‡∏ô</span>
                    </div>
                    <div class="room-stat-item">
                        <span class="stat-icon">üìÖ</span>
                        <span>${formatDateTimeShort(room.createdAt)}</span>
                    </div>
                </div>
                
                ${memberCount > 0 ? `
                    <div class="room-members-preview">
                        <strong>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:</strong>
                        <div class="members-tags-small">
                            ${Object.values(room.members || {}).map(m => `
                                <span class="member-tag-small">${m.name}</span>
                            `).join('')}
                        </div>
                    </div>
                ` : '<p style="color: #95A5A6; font-size: 0.85rem; margin: 10px 0;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á</p>'}
                
                <div class="room-actions">
                    <button class="btn-delete-small" onclick="deleteRoom('${room.roomId}', '${room.name}')">
                        üóëÔ∏è ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á
                    </button>
                </div>
            `;
            
            container.appendChild(card);
        });
    });
}

function showCreateRoomForm() {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    const roomCode = generateTeamCode();
    document.getElementById('roomCodePreview').value = roomCode;
    document.getElementById('roomNameInput').value = '';
    document.getElementById('roomMaxMembers').value = 5;
    
    document.getElementById('roomFormModal').style.display = 'flex';
}

function closeRoomForm() {
    document.getElementById('roomFormModal').style.display = 'none';
}

async function saveRoom() {
    const roomName = document.getElementById('roomNameInput').value.trim();
    const roomCode = document.getElementById('roomCodePreview').value.trim();
    const maxMembers = parseInt(document.getElementById('roomMaxMembers').value) || 5;
    
    if (!roomName) {
        alert(t('pleaseEnterRoomName') || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á!');
        return;
    }
    
    if (!roomCode) {
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
        return;
    }
    
    try {
        const roomData = {
            name: roomName,
            code: roomCode,
            maxMembers: maxMembers,
            createdAt: Date.now(),
            createdBy: 'admin',
            members: {},
            game: 'wordguessing'
        };
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firebase
        await firebase.database().ref(`games/wordguessing/rooms/${roomCode}`).set(roomData);
        
        closeRoomForm();
        alert(t('roomCreatedSuccess') || `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á "${roomName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á: ${roomCode}\n\n‡πÅ‡∏à‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á`);
        loadRoomsAdmin();
        
    } catch (error) {
        console.error('Error creating room:', error);
        alert(t('errorOccurred') || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    }
}

function copyRoomCode(code) {
    navigator.clipboard.writeText(code).then(() => {
        alert(`üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${code}`);
    });
}

function copyRoomCodePreview() {
    const code = document.getElementById('roomCodePreview').value;
    navigator.clipboard.writeText(code).then(() => {
        alert(`üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${code}`);
    });
}

async function deleteRoom(roomId, roomName) {
    if (!confirm(`‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á "${roomName}" ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢`)) {
        return;
    }
    
    try {
        await firebase.database().ref(`games/wordguessing/rooms/${roomId}`).remove();
        alert(`‚úÖ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á "${roomName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
        loadRoomsAdmin();
    } catch (error) {
        console.error('Error deleting room:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á');
    }
}

function formatDateTimeShort(timestamp) {
    const date = new Date(timestamp);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${day}/${month} ${hours}:${minutes}`;
}

// ================================================
// Load Missions for Admin Management
// ================================================
function loadMissionsAdmin() {
    const container = document.getElementById('missionsAdminContainer');
    container.innerHTML = '<p class="loading">üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à...</p>';
    
    const gameName = GAME_CONFIG[currentAdminGame].name;
    
    firebase.database().ref(`games/${currentAdminGame}/missions`).once('value', (snapshot) => {
        container.innerHTML = '';
        
        const missionsData = snapshot.val();
        if (!missionsData || Object.keys(missionsData).length === 0) {
            container.innerHTML = `<p class="empty-state">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏ô ${gameName}<br>‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô</p>`;
            return;
        }
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° id
        const missionsArray = Object.entries(missionsData)
            .map(([key, value]) => ({ key, ...value }))
            .sort((a, b) => a.id - b.id);
        
        missionsArray.forEach(mission => {
            const missionType = mission.type || 'photo';
            const typeBadge = missionType === 'quiz' 
                ? '<span class="admin-type-badge quiz">‚ùì Quiz</span>' 
                : '<span class="admin-type-badge photo">üì∏ Photo</span>';
            
            const card = document.createElement('div');
            card.className = 'mission-admin-card';
            card.innerHTML = `
                <div class="mission-admin-info">
                    <div class="mission-admin-emoji">${mission.title.split(' ')[0]}</div>
                    <div class="mission-admin-details">
                        ${typeBadge}
                        <div class="mission-admin-title">${mission.title}</div>
                        <div class="mission-admin-points">üèÜ ${mission.points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</div>
                    </div>
                </div>
                <div class="mission-admin-actions">
                    <button class="edit-btn-small" onclick="editMission('${mission.key}')">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                    <button class="delete-btn-small" onclick="deleteMission('${mission.key}', '${mission.title}')">üóëÔ∏è ‡∏•‡∏ö</button>
                </div>
            `;
            container.appendChild(card);
        });
    });
}

// ================================================
// Toggle Mission Type Fields
// ================================================
function toggleMissionTypeFields() {
    const missionType = document.getElementById('missionType').value;
    const answerFieldsContainer = document.getElementById('answerFieldsContainer');
    
    if (missionType === 'quiz') {
        answerFieldsContainer.style.display = 'block';
    } else {
        answerFieldsContainer.style.display = 'none';
    }
}

// ================================================
// Show Add Mission Form
// ================================================
function showAddMissionForm() {
    document.getElementById('missionFormTitle').textContent = t('addNewMission');
    document.getElementById('missionType').value = 'photo';
    document.getElementById('missionEmoji').value = '';
    document.getElementById('missionTitle_th').value = '';
    document.getElementById('missionTitle_en').value = '';
    document.getElementById('missionAnswer_th').value = '';
    document.getElementById('missionAnswer_en').value = '';
    document.getElementById('missionPoints').value = '10';
    document.getElementById('editMissionId').value = '';
    toggleMissionTypeFields();
    document.getElementById('missionFormModal').style.display = 'block';
}

// ================================================
// Edit Mission
// ================================================
function editMission(missionKey) {
    firebase.database().ref(`games/${currentAdminGame}/missions/${missionKey}`).once('value', (snapshot) => {
        const mission = snapshot.val();
        if (!mission) return;
        
        // Check if bilingual or legacy format
        let emoji, titleWithoutEmoji_th, titleWithoutEmoji_en;
        
        if (mission.title_th) {
            // New bilingual format
            const titleParts_th = mission.title_th.split(' ');
            emoji = titleParts_th[0];
            titleWithoutEmoji_th = titleParts_th.slice(1).join(' ');
            
            const titleParts_en = (mission.title_en || '').split(' ');
            titleWithoutEmoji_en = titleParts_en.slice(1).join(' ') || '';
        } else {
            // Legacy format - use title for both languages
            const titleParts = mission.title.split(' ');
            emoji = titleParts[0];
            titleWithoutEmoji_th = titleParts.slice(1).join(' ');
            titleWithoutEmoji_en = '';
        }
        
        document.getElementById('missionFormTitle').textContent = t('editMission');
        document.getElementById('missionType').value = mission.type || 'photo';
        document.getElementById('missionEmoji').value = emoji;
        document.getElementById('missionTitle_th').value = titleWithoutEmoji_th;
        document.getElementById('missionTitle_en').value = titleWithoutEmoji_en;
        document.getElementById('missionAnswer_th').value = mission.answer_th || mission.answer || '';
        document.getElementById('missionAnswer_en').value = mission.answer_en || '';
        document.getElementById('missionPoints').value = mission.points;
        document.getElementById('editMissionId').value = missionKey;
        toggleMissionTypeFields();
        document.getElementById('missionFormModal').style.display = 'block';
    });
}

// ================================================
// Save Mission (Add or Update)
// ================================================
function saveMission() {
    const missionType = document.getElementById('missionType').value;
    const emoji = document.getElementById('missionEmoji').value.trim();
    const title_th = document.getElementById('missionTitle_th').value.trim();
    const title_en = document.getElementById('missionTitle_en').value.trim();
    const answer_th = document.getElementById('missionAnswer_th').value.trim();
    const answer_en = document.getElementById('missionAnswer_en').value.trim();
    const points = parseInt(document.getElementById('missionPoints').value);
    const editMissionId = document.getElementById('editMissionId').value;
    
    // Validation
    if (!emoji || !title_th || !title_en || !points) {
        alert(t('fillAllFields'));
        return;
    }
    
    if (missionType === 'quiz' && (!answer_th || !answer_en)) {
        alert(t('fillQuizAnswers'));
        return;
    }
    
    if (points < 5 || points > 100) {
        alert(t('pointsRange'));
        return;
    }
    
    const fullTitle_th = `${emoji} ${title_th}`;
    const fullTitle_en = `${emoji} ${title_en}`;
    
    const missionData = {
        title_th: fullTitle_th,
        title_en: fullTitle_en,
        // Keep legacy title field for backward compatibility
        title: fullTitle_th,
        description: title_th,
        points: points,
        type: missionType
    };
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quiz
    if (missionType === 'quiz') {
        missionData.answer_th = answer_th;
        missionData.answer_en = answer_en;
        // Keep legacy answer field for backward compatibility
        missionData.answer = answer_th;
    }
    
    if (editMissionId) {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏î‡∏¥‡∏°
        firebase.database().ref(`games/${currentAdminGame}/missions/${editMissionId}`).update(missionData)
            .then(() => {
                alert(t('missionSaved'));
                closeMissionForm();
                loadMissionsAdmin();
            }).catch((error) => {
                alert(`${t('errorOccurred')} ${error.message}`);
            });
    } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà
        firebase.database().ref(`games/${currentAdminGame}/missions`).once('value', (snapshot) => {
            const missionsData = snapshot.val() || {};
            const maxId = Object.values(missionsData).reduce((max, m) => Math.max(max, m.id || 0), 0);
            const newId = maxId + 1;
            
            missionData.id = newId;
            
            const newMissionRef = firebase.database().ref(`games/${currentAdminGame}/missions`).push();
            newMissionRef.set(missionData)
                .then(() => {
                    alert(t('missionSaved'));
                    closeMissionForm();
                    loadMissionsAdmin();
                }).catch((error) => {
                    alert(`${t('errorOccurred')} ${error.message}`);
                });
        });
    }
}

// ================================================
// Delete Mission
// ================================================
function deleteMission(missionKey, missionTitle) {
    if (!confirm(`${t('confirmDeleteMission')} "${missionTitle}" ${t('deleteMissionConfirm')}`)) {
        return;
    }
    
    firebase.database().ref(`games/${currentAdminGame}/missions/${missionKey}`).remove()
        .then(() => {
            alert(t('missionDeleteSuccess'));
            loadMissionsAdmin();
        })
        .catch((error) => {
            alert(`${t('errorOccurred')} ${error.message}`);
        });
}

// ================================================
// Close Mission Form Modal
// ================================================
function closeMissionForm() {
    document.getElementById('missionFormModal').style.display = 'none';
}

// ================================================
// Schedule Management
// ================================================
function loadScheduleSettings() {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    firebase.database().ref(`games/${currentAdminGame}/schedule`).once('value', (snapshot) => {
        const schedule = snapshot.val();
        
        if (schedule && schedule.start && schedule.end) {
            // ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô datetime-local format
            document.getElementById('scheduleStart').value = new Date(schedule.start).toISOString().slice(0, 16);
            document.getElementById('scheduleEnd').value = new Date(schedule.end).toISOString().slice(0, 16);
            
            updateScheduleDisplay(schedule);
        } else {
            document.getElementById('scheduleStatus').textContent = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤';
            document.getElementById('displayStart').textContent = '-';
            document.getElementById('displayEnd').textContent = '-';
        }
    });
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    firebase.database().ref(`games/${currentAdminGame}/settings/maxMembers`).once('value', (snapshot) => {
        const maxMembers = snapshot.val() || 5;
        document.getElementById('maxMembersInput').value = maxMembers;
        document.getElementById('displayMaxMembers').textContent = maxMembers;
    });
}

function updateScheduleDisplay(schedule) {
    const now = Date.now();
    const start = schedule.start;
    const end = schedule.end;
    
    let status = '';
    let statusColor = '';
    
    if (now < start) {
        status = '‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°';
        statusColor = '#FFA502';
    } else if (now >= start && now <= end) {
        status = '‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
        statusColor = '#4ECDC4';
    } else {
        status = '‚ùå ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß';
        statusColor = '#FF6B6B';
    }
    
    const statusElement = document.getElementById('scheduleStatus');
    statusElement.textContent = status;
    statusElement.style.color = statusColor;
    statusElement.style.fontWeight = 'bold';
    
    document.getElementById('displayStart').textContent = formatDateTime(start);
    document.getElementById('displayEnd').textContent = formatDateTime(end);
}

function formatDateTime(timestamp) {
    const date = new Date(timestamp);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    
    return `${day}/${month}/${year} ‡πÄ‡∏ß‡∏•‡∏≤ ${hours}:${minutes} ‡∏ô.`;
}

function saveSchedule() {
    const startValue = document.getElementById('scheduleStart').value;
    const endValue = document.getElementById('scheduleEnd').value;
    
    if (!startValue || !endValue) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î');
        return;
    }
    
    const startTime = new Date(startValue).getTime();
    const endTime = new Date(endValue).getTime();
    
    if (startTime >= endTime) {
        alert('‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î');
        return;
    }
    
    const gameName = GAME_CONFIG[currentAdminGame].name;
    firebase.database().ref(`games/${currentAdminGame}/schedule`).set({
        start: startTime,
        end: endTime
    }).then(() => {
        alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${gameName} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
        loadScheduleSettings();
    }).catch((error) => {
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    });
}

function clearSchedule() {
    const gameName = GAME_CONFIG[currentAdminGame].name;
    if (!confirm(`‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á ${gameName} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n(‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤)`)) {
        return;
    }
    
    firebase.database().ref(`games/${currentAdminGame}/schedule`).remove()
        .then(() => {
            alert('‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
            document.getElementById('scheduleStart').value = '';
            document.getElementById('scheduleEnd').value = '';
            loadScheduleSettings();
        })
        .catch((error) => {
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        });
}

// ================================================
// Max Members Management
// ================================================
function saveMaxMembers() {
    const maxMembers = parseInt(document.getElementById('maxMembersInput').value);
    
    if (!maxMembers || maxMembers < 2 || maxMembers > 20) {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2-20 ‡∏Ñ‡∏ô');
        return;
    }
    
    const gameName = GAME_CONFIG[currentAdminGame].name;
    firebase.database().ref(`games/${currentAdminGame}/settings/maxMembers`).set(maxMembers)
        .then(() => {
            alert(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ${gameName} ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${maxMembers} ‡∏Ñ‡∏ô`);
            document.getElementById('displayMaxMembers').textContent = maxMembers;
        })
        .catch((error) => {
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        });
}

// ================================================
// Close modal when clicking outside
// ================================================
window.onclick = function(event) {
    const photoModal = document.getElementById('photoModal');
    const quizModal = document.getElementById('quizModal');
    const missionFormModal = document.getElementById('missionFormModal');
    
    if (event.target === photoModal) {
        closeModal();
    }
    if (event.target === quizModal) {
        closeQuizModal();
    }
    if (event.target === missionFormModal) {
        closeMissionForm();
    }
};

// ================================================
// Submissions Review (Admin)
// ================================================
let currentTeamForSubmissions = null;

async function loadSubmissions() {
    // Show team list view
    document.getElementById('submissionsTeamListView').style.display = 'block';
    document.getElementById('submissionsDetailView').style.display = 'none';
    
    const container = document.getElementById('submissionsTeamList');
    container.innerHTML = '<p class="loading">üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>';
    
    try {
        // Load teams and submissions
        const teamsSnapshot = await firebase.database().ref(`games/${currentAdminGame}/teams`).once('value');
        const submissionsSnapshot = await firebase.database().ref(`games/${currentAdminGame}/submissions`).once('value');
        
        const teamsData = teamsSnapshot.val();
        const submissionsData = submissionsSnapshot.val();
        
        if (!teamsData) {
            container.innerHTML = '<div class="empty-submissions">üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡∏°</div>';
            updateSubmissionStats(0, 0, 0);
            return;
        }
        
        // Calculate stats per team
        const teamStats = {};
        
        if (submissionsData) {
            Object.values(submissionsData).forEach(submission => {
                if (!teamStats[submission.teamId]) {
                    teamStats[submission.teamId] = {
                        total: 0,
                        approved: 0,
                        revoked: 0
                    };
                }
                teamStats[submission.teamId].total++;
                if (submission.status === 'approved') {
                    teamStats[submission.teamId].approved++;
                } else if (submission.status === 'revoked') {
                    teamStats[submission.teamId].revoked++;
                }
            });
        }
        
        // Calculate overall stats
        const allSubmissions = submissionsData ? Object.values(submissionsData) : [];
        const approvedCount = allSubmissions.filter(s => s.status === 'approved').length;
        const revokedCount = allSubmissions.filter(s => s.status === 'revoked').length;
        updateSubmissionStats(approvedCount, revokedCount, allSubmissions.length);
        
        // Display team cards
        container.innerHTML = '';
        
        Object.entries(teamsData).forEach(([teamId, team]) => {
            const stats = teamStats[teamId] || { total: 0, approved: 0, revoked: 0 };
            const card = createTeamSubmissionCard(teamId, team, stats);
            container.appendChild(card);
        });
        
    } catch (error) {
        console.error('Error loading submissions:', error);
        container.innerHTML = '<div class="empty-submissions">‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
    }
}

function createTeamSubmissionCard(teamId, team, stats) {
    const card = document.createElement('div');
    card.className = 'team-submission-card';
    card.onclick = () => showTeamSubmissionsDetail(teamId, team.name || team.teamName || 'Unknown Team');
    
    card.innerHTML = `
        <div class="team-submission-header">
            <div class="team-submission-icon">üöó</div>
            <div class="team-submission-info">
                <div class="team-submission-name">${team.name || team.teamName || 'Unknown Team'}</div>
                <div class="team-submission-code">‡∏£‡∏´‡∏±‡∏™: ${teamId}</div>
            </div>
        </div>
        <div class="team-submission-stats">
            <div class="team-stat">
                <span class="team-stat-value">${stats.total}</span>
                <span class="team-stat-label">‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
            </div>
            <div class="team-stat">
                <span class="team-stat-value">${stats.approved}</span>
                <span class="team-stat-label">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</span>
            </div>
            <div class="team-stat revoked">
                <span class="team-stat-value">${stats.revoked}</span>
                <span class="team-stat-label">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</span>
            </div>
            <div class="team-stat score">
                <span class="team-stat-value">${team.score || 0}</span>
                <span class="team-stat-label">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
            </div>
        </div>
    `;
    
    return card;
}

async function showTeamSubmissionsDetail(teamId, teamName) {
    currentTeamForSubmissions = teamId;
    
    // Hide team list, show detail view
    document.getElementById('submissionsTeamListView').style.display = 'none';
    document.getElementById('submissionsDetailView').style.display = 'block';
    
    // Update title
    document.getElementById('submissionsDetailTitle').textContent = `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô: ${teamName}`;
    
    // Load submissions for this team
    await loadTeamSubmissionsDetail();
    
    // Populate mission filter
    await populateSubmissionFilters();
}

function backToTeamList() {
    currentTeamForSubmissions = null;
    document.getElementById('submissionsTeamListView').style.display = 'block';
    document.getElementById('submissionsDetailView').style.display = 'none';
}

async function loadTeamSubmissionsDetail() {
    if (!currentTeamForSubmissions) return;
    
    const container = document.getElementById('submissionsDetailContainer');
    container.innerHTML = '<p class="loading">üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>';
    
    const filterMission = document.getElementById('filterMission').value;
    const filterStatus = document.getElementById('filterStatus').value;
    
    try {
        const submissionsSnapshot = await firebase.database().ref(`games/${currentAdminGame}/submissions`).once('value');
        const submissionsData = submissionsSnapshot.val();
        
        if (!submissionsData) {
            container.innerHTML = '<div class="empty-submissions">üì≠ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô</div>';
            return;
        }
        
        // Filter by team and other criteria
        let submissionsArray = Object.entries(submissionsData)
            .map(([key, value]) => ({ key, ...value }))
            .filter(s => s.teamId === currentTeamForSubmissions)
            .sort((a, b) => b.timestamp - a.timestamp);
        
        // Apply filters
        if (filterMission !== 'all') {
            submissionsArray = submissionsArray.filter(s => s.missionId == filterMission);
        }
        if (filterStatus !== 'all') {
            submissionsArray = submissionsArray.filter(s => s.status === filterStatus);
        }
        
        // Display submissions
        container.innerHTML = '';
        if (submissionsArray.length === 0) {
            container.innerHTML = '<div class="empty-submissions">üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>';
            return;
        }
        
        submissionsArray.forEach(submission => {
            const card = createSubmissionCard(submission);
            container.appendChild(card);
        });
        
    } catch (error) {
        console.error('Error loading team submissions:', error);
        container.innerHTML = '<div class="empty-submissions">‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>';
    }
}

function createSubmissionCard(submission) {
    const card = document.createElement('div');
    card.className = `submission-card ${submission.status === 'revoked' ? 'revoked' : ''}`;
    
    // Status badge for different statuses
    let statusBadge = '';
    if (submission.status === 'revoked') {
        statusBadge = `<span class="submission-status revoked" data-i18n="statusRejected">‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</span>`;
    } else if (submission.status === 'pending') {
        statusBadge = `<span class="submission-status pending" data-i18n="statusPending">‚è≥ ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</span>`;
    } else if (submission.status === 'approved') {
        const approvedLabel = submission.missionType === 'quiz' && submission.userAnswer 
            ? t('statusAutoApproved') 
            : t('approved');
        statusBadge = `<span class="submission-status approved">‚úÖ ${approvedLabel}</span>`;
    }
    
    const timeStr = new Date(submission.timestamp).toLocaleString('th-TH', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    let contentHTML = '';
    if (submission.missionType === 'photo') {
        contentHTML = `
            <div class="submission-content">
                <img src="${submission.photoBase64}" alt="Photo" class="submission-photo" onclick="showLightbox('${submission.photoBase64}')">
            </div>
        `;
    } else if (submission.missionType === 'quiz') {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const correctAnswer_th = submission.correctAnswer_th || submission.correctAnswer || '-';
        const correctAnswer_en = submission.correctAnswer_en || '-';
        
        contentHTML = `
            <div class="submission-content quiz-submission">
                <div class="quiz-answer-row">
                    <div class="submission-answer-label" data-i18n="yourAnswerIs">üí≠ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</div>
                    <div class="submission-answer user-answer">${submission.userAnswer}</div>
                </div>
                <div class="quiz-answer-row" style="margin-top: 10px;">
                    <div class="submission-answer-label" data-i18n="correctAnswerIs">‚úì ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:</div>
                    <div class="submission-answer correct-answer">
                        <div>üáπüá≠ ${correctAnswer_th}</div>
                        ${correctAnswer_en !== '-' ? `<div>üá¨üáß ${correctAnswer_en}</div>` : ''}
                    </div>
                </div>
            </div>
        `;
    }
    
    const isRevoked = submission.status === 'revoked';
    const isPending = submission.status === 'pending';
    
    // Show revoked reason if exists
    let revokedReasonHTML = '';
    if (isRevoked && submission.revokedReason) {
        revokedReasonHTML = `
            <div class="revoked-reason">
                <strong>üö´ <span data-i18n="reason">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:</span></strong> ${submission.revokedReason}
            </div>
        `;
    }
    
    // Action buttons - ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏° status ‡πÅ‡∏•‡∏∞ missionType
    let actionsHTML = '';
    if (submission.missionType === 'quiz' && isPending) {
        // Quiz pending: ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Approve/Reject
        actionsHTML = `
            <div class="submission-actions quiz-actions">
                <button class="approve-btn" onclick="approveQuizSubmission('${submission.key}', '${submission.teamId}', ${submission.missionId}, ${submission.missionPoints})" data-i18n="approveAnswer">
                    ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                </button>
                <button class="reject-btn" onclick="rejectQuizSubmission('${submission.key}')" data-i18n="rejectAnswer">
                    ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                </button>
            </div>
        `;
    } else if (!isRevoked && submission.status === 'approved') {
        // Approved: ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        actionsHTML = `
            <div class="submission-actions">
                <button class="revoke-btn" onclick="revokeSubmission('${submission.key}', '${submission.teamId}', ${submission.missionId}, ${submission.missionPoints})">
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                </button>
            </div>
        `;
    } else if (isRevoked) {
        // Already revoked
        actionsHTML = `
            <div class="submission-actions">
                <button class="revoke-btn" disabled>
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß
                </button>
            </div>
        `;
    }
    
    card.innerHTML = `
        <div class="submission-header">
            <div class="submission-info">
                <div class="submission-team">üöó ${submission.teamName}</div>
                <div class="submission-mission">${submission.missionTitle}</div>
                <div class="submission-meta">
                    üë§ <span data-i18n="submittedBy">‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢:</span> ${submission.submittedBy} | üïê ${timeStr}
                </div>
            </div>
            <div style="display: flex; flex-direction: column; gap: 10px; align-items: flex-end;">
                <div class="submission-points">+${submission.missionPoints}</div>
                ${statusBadge}
            </div>
        </div>
        ${revokedReasonHTML}
        ${contentHTML}
        ${actionsHTML}
    `;
    
    // Update translations for dynamic content
    updatePageLanguage();
    
    return card;
}

// ================================================
// Quiz Submission Approval/Rejection Functions
// ================================================

async function approveQuizSubmission(submissionKey, teamId, missionId, points) {
    const confirmed = confirm(t('confirmApprove') + `\n\n+${points} ${t('points')}`);
    if (!confirmed) return;
    
    try {
        // Update submission status to approved
        await firebase.database().ref(`games/${currentAdminGame}/submissions/${submissionKey}`).update({
            status: 'approved',
            approvedAt: Date.now()
        });
        
        // Mark mission as completed
        const submissionSnapshot = await firebase.database().ref(`games/${currentAdminGame}/submissions/${submissionKey}`).once('value');
        const submission = submissionSnapshot.val();
        
        await firebase.database().ref(`games/${currentAdminGame}/teams/${teamId}/missions/${missionId}`).set({
            completed: true,
            attempted: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà pending ‡πÅ‡∏•‡πâ‡∏ß
            completedBy: submission.submittedBy,
            answer: submission.userAnswer,
            timestamp: submission.timestamp
        });
        
        // Award points retroactively
        const teamRef = firebase.database().ref(`games/${currentAdminGame}/teams/${teamId}`);
        const teamSnapshot = await teamRef.once('value');
        const teamData = teamSnapshot.val();
        
        if (teamData) {
            const newScore = (teamData.score || 0) + points;
            await teamRef.child('score').set(newScore);
        }
        
        alert(t('approveSuccess'));
        loadTeamSubmissionsDetail(); // Reload list
        
    } catch (error) {
        console.error('Error approving quiz submission:', error);
        alert(`${t('errorOccurred')} ${error.message}`);
    }
}

async function rejectQuizSubmission(submissionKey) {
    const reason = prompt(t('confirmReject') + '\n\n' + t('reason') + ':');
    
    if (reason === null) return; // User cancelled
    
    try {
        // Update submission status to rejected
        await firebase.database().ref(`games/${currentAdminGame}/submissions/${submissionKey}`).update({
            status: 'revoked',
            revokedAt: Date.now(),
            revokedReason: reason.trim() || '‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á / Wrong answer'
        });
        
        alert(t('rejectSuccess'));
        loadTeamSubmissionsDetail(); // Reload list
        
    } catch (error) {
        console.error('Error rejecting quiz submission:', error);
        alert(`${t('errorOccurred')} ${error.message}`);
    }
}

// ================================================
// Revoke Submission (for already approved missions)
// ================================================

async function revokeSubmission(submissionKey, teamId, missionId, points) {
    // Ask for reason
    const reason = prompt(
        `‚ö†Ô∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ?\n\n` +
        `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏ú‡∏¥‡∏î, ‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î):\n\n` +
        `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:\n` +
        `- ‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${points} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô\n` +
        `- ‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ`
    );
    
    if (!reason || reason.trim() === '') {
        alert('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å');
        return;
    }
    
    try {
        // Update submission status with reason
        await firebase.database().ref(`games/${currentAdminGame}/submissions/${submissionKey}`).update({
            status: 'revoked',
            revokedAt: Date.now(),
            revokedReason: reason.trim()
        });
        
        // Mark mission as revoked (NOT remove - keep it locked)
        await firebase.database().ref(`games/${currentAdminGame}/teams/${teamId}/missions/${missionId}`).update({
            completed: false,
            revoked: true,
            revokedReason: reason.trim(),
            revokedAt: Date.now()
        });
        
        // Deduct points
        const teamSnapshot = await firebase.database().ref(`games/${currentAdminGame}/teams/${teamId}`).once('value');
        const teamData = teamSnapshot.val();
        const newScore = Math.max(0, (teamData.score || 0) - points);
        await firebase.database().ref(`games/${currentAdminGame}/teams/${teamId}/score`).set(newScore);
        
        alert(`‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‚úÇÔ∏è ‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: -${points}\nüö´ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}\n‚ö†Ô∏è ‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ`);
        
        // Reload current view
        if (currentTeamForSubmissions) {
            loadTeamSubmissionsDetail();
        } else {
            loadSubmissions();
        }
        
    } catch (error) {
        console.error('Error revoking submission:', error);
        alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
}

function updateSubmissionStats(approved, revoked, total) {
    document.getElementById('approvedCount').textContent = approved;
    document.getElementById('revokedCount').textContent = revoked;
    document.getElementById('totalSubmissions').textContent = total;
}

async function populateSubmissionFilters() {
    try {
        // Populate mission filter (only available in detail view)
        const missionsSnapshot = await firebase.database().ref(`games/${currentAdminGame}/missions`).once('value');
        const missionsData = missionsSnapshot.val();
        
        const missionFilter = document.getElementById('filterMission');
        if (missionFilter) {
            missionFilter.innerHTML = '<option value="all">‡∏ó‡∏∏‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à</option>';
            
            if (missionsData) {
                Object.values(missionsData)
                    .sort((a, b) => a.id - b.id)
                    .forEach(mission => {
                        const option = document.createElement('option');
                        option.value = mission.id;
                        option.textContent = mission.title;
                        missionFilter.appendChild(option);
                    });
            }
        }
        
    } catch (error) {
        console.error('Error populating filters:', error);
    }
}

// ================================================
// Show Team Submissions (from Scoreboard)
// ================================================
async function showTeamSubmissions(teamId, teamName) {
    // Switch to submissions tab
    showAdminTab('submissions');
    
    // Wait for tab to load
    setTimeout(async () => {
        // Go directly to team detail view
        await showTeamSubmissionsDetail(teamId, teamName);
        
        // Scroll to top
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }, 100);
}
